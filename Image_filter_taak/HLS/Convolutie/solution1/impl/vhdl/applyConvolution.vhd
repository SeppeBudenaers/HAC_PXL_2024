-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity applyConvolution is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_R_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_R_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    image_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    image_r_TVALID : IN STD_LOGIC;
    image_r_TREADY : OUT STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_AWVALID : IN STD_LOGIC;
    s_axi_control_r_AWREADY : OUT STD_LOGIC;
    s_axi_control_r_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_WVALID : IN STD_LOGIC;
    s_axi_control_r_WREADY : OUT STD_LOGIC;
    s_axi_control_r_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH/8-1 downto 0);
    s_axi_control_r_ARVALID : IN STD_LOGIC;
    s_axi_control_r_ARREADY : OUT STD_LOGIC;
    s_axi_control_r_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_ADDR_WIDTH-1 downto 0);
    s_axi_control_r_RVALID : OUT STD_LOGIC;
    s_axi_control_r_RREADY : IN STD_LOGIC;
    s_axi_control_r_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_R_DATA_WIDTH-1 downto 0);
    s_axi_control_r_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_r_BVALID : OUT STD_LOGIC;
    s_axi_control_r_BREADY : IN STD_LOGIC;
    s_axi_control_r_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of applyConvolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "applyConvolution_applyConvolution,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.312000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2716,HLS_SYN_LUT=3525,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal width : STD_LOGIC_VECTOR (31 downto 0);
    signal channels : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_ce0 : STD_LOGIC;
    signal kernel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal channels_read_reg_715 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_read_reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_read_reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln6_reg_781 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln25_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln24_1_fu_365_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln24_1_reg_799 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln24_fu_392_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln24_reg_813 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln24_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_1_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_1_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_426_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal or_ln31_1_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_1_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln27_fu_460_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln27_reg_852 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln28_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mid1_fu_490_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid1_reg_862 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln27_1_fu_501_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln27_1_reg_868 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln27_fu_509_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln27_reg_873 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln27_3_fu_513_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln27_3_reg_878 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln29_fu_525_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln29_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_fu_530_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln28_reg_889 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln31_2_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_2_reg_895 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal kernel_load_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_applyConvolution_Pipeline_1_fu_275_ap_start : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_275_ap_done : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_275_ap_idle : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_275_ap_ready : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_275_sum_2_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_1_fu_275_sum_2_2_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_275_sum_1_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_1_fu_275_sum_1_2_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_275_sum_0_21_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_1_fu_275_sum_0_21_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_start : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_done : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_idle : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_ready : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_image_r_TREADY : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_2_6_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_2_6_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_1_6_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_1_6_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_0_6_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_0_6_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_start : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_done : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_idle : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_ready : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_output_r_TREADY : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_output_r_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_output_r_TVALID : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_image_r_TREADY : STD_LOGIC;
    signal ky_reg_175 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal indvar_flatten_reg_187 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_sum_2_9_phi_fu_243_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_5_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_1_9_phi_fu_255_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_5_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_0_9_phi_fu_267_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_0_5_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal kx_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_9_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_9_reg_251 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_0_9_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_1_fu_275_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln24_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal p_cast_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_96 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln25_fu_541_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln27_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_0_1_fu_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_1_1_fu_104 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_2_1_fu_108 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y_fu_112 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal indvar_flatten9_fu_116 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal grp_fu_318_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_fu_386_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln24_1_fu_403_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln27_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_431_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next2514_fu_480_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln27_1_fu_486_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next25_mid1_fu_495_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln27_fu_472_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln28_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_fu_536_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_579_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln27_1_cast37_fu_576_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal slt51_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_592_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev52_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_3_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_621_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln27_2_fu_615_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_21_fu_586_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_cast_fu_650_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_22_fu_653_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal regslice_both_output_r_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal regslice_both_image_r_U_apdone_blk : STD_LOGIC;
    signal image_r_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal image_r_TVALID_int_regslice : STD_LOGIC;
    signal image_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_image_r_U_ack_in : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_U_vld_out : STD_LOGIC;
    signal grp_fu_318_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_318_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component applyConvolution_applyConvolution_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_2_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_2_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_2_2_out_ap_vld : OUT STD_LOGIC;
        sum_1_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_1_2_out_ap_vld : OUT STD_LOGIC;
        sum_0_21_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_0_21_out_ap_vld : OUT STD_LOGIC );
    end component;


    component applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_33_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_2_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_1_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_0_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        channels : IN STD_LOGIC_VECTOR (31 downto 0);
        image_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        image_r_TVALID : IN STD_LOGIC;
        image_r_TREADY : OUT STD_LOGIC;
        kernel_load : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_2_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_2_6_out_ap_vld : OUT STD_LOGIC;
        sum_1_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_1_6_out_ap_vld : OUT STD_LOGIC;
        sum_0_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_0_6_out_ap_vld : OUT STD_LOGIC );
    end component;


    component applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_41_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        image_r_TVALID : IN STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC;
        channels : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_0_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_1_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_2_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_TVALID : OUT STD_LOGIC;
        image_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        image_r_TREADY : OUT STD_LOGIC );
    end component;


    component applyConvolution_mul_32ns_32ns_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component applyConvolution_kernel_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component applyConvolution_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        width : OUT STD_LOGIC_VECTOR (31 downto 0);
        channels : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component applyConvolution_control_r_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component applyConvolution_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    kernel_U : component applyConvolution_kernel_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => kernel_address0,
        ce0 => kernel_ce0,
        q0 => kernel_q0);

    grp_applyConvolution_Pipeline_1_fu_275 : component applyConvolution_applyConvolution_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_applyConvolution_Pipeline_1_fu_275_ap_start,
        ap_done => grp_applyConvolution_Pipeline_1_fu_275_ap_done,
        ap_idle => grp_applyConvolution_Pipeline_1_fu_275_ap_idle,
        ap_ready => grp_applyConvolution_Pipeline_1_fu_275_ap_ready,
        sum_2_1 => sum_2_1_fu_108,
        sum_1_1 => sum_1_1_fu_104,
        sum_0_1 => sum_0_1_fu_100,
        sum_2_2_out => grp_applyConvolution_Pipeline_1_fu_275_sum_2_2_out,
        sum_2_2_out_ap_vld => grp_applyConvolution_Pipeline_1_fu_275_sum_2_2_out_ap_vld,
        sum_1_2_out => grp_applyConvolution_Pipeline_1_fu_275_sum_1_2_out,
        sum_1_2_out_ap_vld => grp_applyConvolution_Pipeline_1_fu_275_sum_1_2_out_ap_vld,
        sum_0_21_out => grp_applyConvolution_Pipeline_1_fu_275_sum_0_21_out,
        sum_0_21_out_ap_vld => grp_applyConvolution_Pipeline_1_fu_275_sum_0_21_out_ap_vld);

    grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285 : component applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_33_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_start,
        ap_done => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_done,
        ap_idle => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_idle,
        ap_ready => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_ready,
        sum_2_5 => sum_2_5_reg_198,
        sum_1_5 => sum_1_5_reg_208,
        sum_0_5 => sum_0_5_reg_218,
        channels => channels_read_reg_715,
        image_r_TDATA => image_r_TDATA_int_regslice,
        image_r_TVALID => image_r_TVALID_int_regslice,
        image_r_TREADY => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_image_r_TREADY,
        kernel_load => kernel_load_reg_904,
        sum_2_6_out => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_2_6_out,
        sum_2_6_out_ap_vld => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_2_6_out_ap_vld,
        sum_1_6_out => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_1_6_out,
        sum_1_6_out_ap_vld => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_1_6_out_ap_vld,
        sum_0_6_out => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_0_6_out,
        sum_0_6_out_ap_vld => grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_0_6_out_ap_vld);

    grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303 : component applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_41_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_start,
        ap_done => grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_done,
        ap_idle => grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_idle,
        ap_ready => grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_ready,
        image_r_TVALID => image_r_TVALID_int_regslice,
        output_r_TREADY => grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_output_r_TREADY,
        channels => channels_read_reg_715,
        sum_0_5 => sum_0_5_reg_218,
        sum_1_5 => sum_1_5_reg_208,
        sum_2_5 => sum_2_5_reg_198,
        output_r_TDATA => grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_output_r_TDATA,
        output_r_TVALID => grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_output_r_TVALID,
        image_r_TDATA => image_r_TDATA_int_regslice,
        image_r_TREADY => grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_image_r_TREADY);

    control_s_axi_U : component applyConvolution_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        height => height,
        width => width,
        channels => channels);

    control_r_s_axi_U : component applyConvolution_control_r_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_R_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_R_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_r_AWVALID,
        AWREADY => s_axi_control_r_AWREADY,
        AWADDR => s_axi_control_r_AWADDR,
        WVALID => s_axi_control_r_WVALID,
        WREADY => s_axi_control_r_WREADY,
        WDATA => s_axi_control_r_WDATA,
        WSTRB => s_axi_control_r_WSTRB,
        ARVALID => s_axi_control_r_ARVALID,
        ARREADY => s_axi_control_r_ARREADY,
        ARADDR => s_axi_control_r_ARADDR,
        RVALID => s_axi_control_r_RVALID,
        RREADY => s_axi_control_r_RREADY,
        RDATA => s_axi_control_r_RDATA,
        RRESP => s_axi_control_r_RRESP,
        BVALID => s_axi_control_r_BVALID,
        BREADY => s_axi_control_r_BREADY,
        BRESP => s_axi_control_r_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    mul_32ns_32ns_64_3_1_U31 : component applyConvolution_mul_32ns_32ns_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_318_p0,
        din1 => grp_fu_318_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_318_p2);

    regslice_both_image_r_U : component applyConvolution_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => image_r_TDATA,
        vld_in => image_r_TVALID,
        ack_in => regslice_both_image_r_U_ack_in,
        data_out => image_r_TDATA_int_regslice,
        vld_out => image_r_TVALID_int_regslice,
        ack_out => image_r_TREADY_int_regslice,
        apdone_blk => regslice_both_image_r_U_apdone_blk);

    regslice_both_output_r_U : component applyConvolution_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_output_r_TDATA,
        vld_in => grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_output_r_TVALID,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_applyConvolution_Pipeline_1_fu_275_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_applyConvolution_Pipeline_1_fu_275_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln24_fu_360_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_applyConvolution_Pipeline_1_fu_275_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_applyConvolution_Pipeline_1_fu_275_ap_ready = ap_const_logic_1)) then 
                    grp_applyConvolution_Pipeline_1_fu_275_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_ready = ap_const_logic_1)) then 
                    grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                    grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_ready = ap_const_logic_1)) then 
                    grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten9_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten9_fu_116 <= ap_const_lv64_0;
            elsif (((icmp_ln27_fu_454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                indvar_flatten9_fu_116 <= add_ln24_1_reg_799;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten_reg_187 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten_reg_187 <= add_ln27_reg_852;
            end if; 
        end if;
    end process;

    kx_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                kx_reg_228 <= ap_const_lv3_7;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                kx_reg_228 <= add_ln28_reg_889;
            end if; 
        end if;
    end process;

    ky_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                ky_reg_175 <= ap_const_lv3_7;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ky_reg_175 <= select_ln27_3_reg_878;
            end if; 
        end if;
    end process;

    sum_0_5_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sum_0_5_reg_218 <= grp_applyConvolution_Pipeline_1_fu_275_sum_0_21_out;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                sum_0_5_reg_218 <= ap_phi_mux_sum_0_9_phi_fu_267_p4;
            end if; 
        end if;
    end process;

    sum_0_9_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln31_2_fu_644_p2 = ap_const_lv1_1))) then 
                sum_0_9_reg_263 <= sum_0_5_reg_218;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln31_2_reg_895 = ap_const_lv1_0))) then 
                sum_0_9_reg_263 <= grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_0_6_out;
            end if; 
        end if;
    end process;

    sum_1_5_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sum_1_5_reg_208 <= grp_applyConvolution_Pipeline_1_fu_275_sum_1_2_out;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                sum_1_5_reg_208 <= ap_phi_mux_sum_1_9_phi_fu_255_p4;
            end if; 
        end if;
    end process;

    sum_1_9_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln31_2_fu_644_p2 = ap_const_lv1_1))) then 
                sum_1_9_reg_251 <= sum_1_5_reg_208;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln31_2_reg_895 = ap_const_lv1_0))) then 
                sum_1_9_reg_251 <= grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_1_6_out;
            end if; 
        end if;
    end process;

    sum_2_5_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                sum_2_5_reg_198 <= grp_applyConvolution_Pipeline_1_fu_275_sum_2_2_out;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                sum_2_5_reg_198 <= ap_phi_mux_sum_2_9_phi_fu_243_p4;
            end if; 
        end if;
    end process;

    sum_2_9_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln31_2_fu_644_p2 = ap_const_lv1_1))) then 
                sum_2_9_reg_239 <= sum_2_5_reg_198;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln31_2_reg_895 = ap_const_lv1_0))) then 
                sum_2_9_reg_239 <= grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_2_6_out;
            end if; 
        end if;
    end process;

    x_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_fu_96 <= ap_const_lv31_0;
            elsif (((icmp_ln27_fu_454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                x_fu_96 <= select_ln25_fu_541_p3;
            end if; 
        end if;
    end process;

    y_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_112 <= ap_const_lv31_0;
            elsif (((icmp_ln27_fu_454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                y_fu_112 <= select_ln24_reg_813;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln24_1_reg_799 <= add_ln24_1_fu_365_p2;
                icmp_ln25_reg_789 <= icmp_ln25_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                add_ln27_reg_852 <= add_ln27_fu_460_p2;
                add_ln28_reg_889 <= add_ln28_fu_530_p2;
                add_ln29_reg_883 <= add_ln29_fu_525_p2;
                icmp_ln28_reg_857 <= icmp_ln28_fu_466_p2;
                or_ln31_1_reg_844 <= or_ln31_1_fu_448_p2;
                p_mid1_reg_862 <= p_mid1_fu_490_p2;
                select_ln27_1_reg_868 <= select_ln27_1_fu_501_p3;
                select_ln27_3_reg_878 <= select_ln27_3_fu_513_p3;
                trunc_ln27_reg_873 <= trunc_ln27_fu_509_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                channels_read_reg_715 <= channels;
                height_read_reg_728 <= height;
                width_read_reg_721 <= width;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                empty_reg_838 <= empty_fu_426_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                kernel_load_reg_904 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln6_reg_781 <= grp_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                or_ln31_2_reg_895 <= or_ln31_2_fu_644_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                select_ln24_reg_813 <= select_ln24_fu_392_p3;
                    zext_ln24_reg_818(30 downto 0) <= zext_ln24_fu_399_p1(30 downto 0);
                    zext_ln25_1_reg_824(30 downto 0) <= zext_ln25_1_fu_409_p1(30 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                sum_0_1_fu_100 <= sum_0_5_reg_218;
                sum_1_1_fu_104 <= sum_1_5_reg_208;
                sum_2_1_fu_108 <= sum_2_5_reg_198;
            end if;
        end if;
    end process;
    zext_ln24_reg_818(31) <= '0';
    zext_ln25_1_reg_824(31) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state9, or_ln31_2_fu_644_p2, ap_CS_fsm_state10, grp_applyConvolution_Pipeline_1_fu_275_ap_done, grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_done, grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_done, icmp_ln24_fu_360_p2, ap_CS_fsm_state6, ap_CS_fsm_state12, ap_CS_fsm_state15, icmp_ln27_fu_454_p2, ap_CS_fsm_state16, regslice_both_output_r_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln24_fu_360_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_applyConvolution_Pipeline_1_fu_275_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((icmp_ln27_fu_454_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (or_ln31_2_fu_644_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((regslice_both_output_r_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln24_1_fu_365_p2 <= std_logic_vector(unsigned(indvar_flatten9_fu_116) + unsigned(ap_const_lv64_1));
    add_ln24_fu_386_p2 <= std_logic_vector(unsigned(y_fu_112) + unsigned(ap_const_lv31_1));
    add_ln25_fu_536_p2 <= std_logic_vector(unsigned(x_fu_96) + unsigned(ap_const_lv31_1));
    add_ln27_fu_460_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_187) + unsigned(ap_const_lv4_1));
    add_ln28_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_reg_889),4));
    add_ln28_fu_530_p2 <= std_logic_vector(signed(select_ln27_fu_472_p3) + signed(ap_const_lv3_1));
    add_ln29_fu_525_p2 <= std_logic_vector(signed(sext_ln28_fu_521_p1) + signed(zext_ln25_1_reg_824));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_done)
    begin
        if ((grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_done)
    begin
        if ((grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(regslice_both_output_r_U_apdone_blk)
    begin
        if ((regslice_both_output_r_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_applyConvolution_Pipeline_1_fu_275_ap_done)
    begin
        if ((grp_applyConvolution_Pipeline_1_fu_275_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state16, regslice_both_output_r_U_apdone_blk)
    begin
        if (((regslice_both_output_r_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_sum_0_9_phi_fu_267_p4_assign_proc : process(or_ln31_2_reg_895, grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_0_6_out, ap_CS_fsm_state13, sum_0_9_reg_263)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln31_2_reg_895 = ap_const_lv1_0))) then 
            ap_phi_mux_sum_0_9_phi_fu_267_p4 <= grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_0_6_out;
        else 
            ap_phi_mux_sum_0_9_phi_fu_267_p4 <= sum_0_9_reg_263;
        end if; 
    end process;


    ap_phi_mux_sum_1_9_phi_fu_255_p4_assign_proc : process(or_ln31_2_reg_895, grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_1_6_out, ap_CS_fsm_state13, sum_1_9_reg_251)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln31_2_reg_895 = ap_const_lv1_0))) then 
            ap_phi_mux_sum_1_9_phi_fu_255_p4 <= grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_1_6_out;
        else 
            ap_phi_mux_sum_1_9_phi_fu_255_p4 <= sum_1_9_reg_251;
        end if; 
    end process;


    ap_phi_mux_sum_2_9_phi_fu_243_p4_assign_proc : process(or_ln31_2_reg_895, grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_2_6_out, ap_CS_fsm_state13, sum_2_9_reg_239)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (or_ln31_2_reg_895 = ap_const_lv1_0))) then 
            ap_phi_mux_sum_2_9_phi_fu_243_p4 <= grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_sum_2_6_out;
        else 
            ap_phi_mux_sum_2_9_phi_fu_243_p4 <= sum_2_9_reg_239;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16, regslice_both_output_r_U_apdone_blk)
    begin
        if (((regslice_both_output_r_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_21_fu_586_p2 <= std_logic_vector(unsigned(tmp_1_fu_579_p3) - unsigned(select_ln27_1_cast37_fu_576_p1));
    empty_22_fu_653_p2 <= std_logic_vector(unsigned(empty_21_fu_586_p2) + unsigned(add_ln28_cast_fu_650_p1));
    empty_fu_426_p2 <= std_logic_vector(signed(sext_ln27_fu_422_p1) + signed(zext_ln24_reg_818));
    grp_applyConvolution_Pipeline_1_fu_275_ap_start <= grp_applyConvolution_Pipeline_1_fu_275_ap_start_reg;
    grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_start <= grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_ap_start_reg;
    grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_start <= grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_ap_start_reg;
    grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_output_r_TREADY <= (output_r_TREADY_int_regslice and ap_CS_fsm_state15);
    grp_fu_318_p0 <= grp_fu_318_p00(32 - 1 downto 0);
    grp_fu_318_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_read_reg_728),64));
    grp_fu_318_p1 <= grp_fu_318_p10(32 - 1 downto 0);
    grp_fu_318_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_read_reg_721),64));
    icmp_ln24_fu_360_p2 <= "1" when (indvar_flatten9_fu_116 = mul_ln6_reg_781) else "0";
    icmp_ln25_fu_355_p2 <= "1" when (signed(zext_ln25_fu_351_p1) < signed(width_read_reg_721)) else "0";
    icmp_ln27_fu_454_p2 <= "1" when (indvar_flatten_reg_187 = ap_const_lv4_9) else "0";
    icmp_ln28_fu_466_p2 <= "1" when (kx_reg_228 = ap_const_lv3_2) else "0";
    icmp_ln31_fu_628_p2 <= "1" when (signed(add_ln29_reg_883) < signed(width_read_reg_721)) else "0";
    image_r_TREADY <= regslice_both_image_r_U_ack_in;

    image_r_TREADY_int_regslice_assign_proc : process(grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_image_r_TREADY, grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_image_r_TREADY, ap_CS_fsm_state12, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            image_r_TREADY_int_regslice <= grp_applyConvolution_Pipeline_VITIS_LOOP_41_6_fu_303_image_r_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            image_r_TREADY_int_regslice <= grp_applyConvolution_Pipeline_VITIS_LOOP_33_5_fu_285_image_r_TREADY;
        else 
            image_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    indvars_iv_next2514_fu_480_p2 <= std_logic_vector(signed(ky_reg_175) + signed(ap_const_lv3_1));
    indvars_iv_next25_mid1_fu_495_p2 <= std_logic_vector(signed(ky_reg_175) + signed(ap_const_lv3_2));
    kernel_address0 <= p_cast_fu_659_p1(4 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln31_1_fu_448_p2 <= (tmp_fu_431_p3 or rev_fu_442_p2);
    or_ln31_2_fu_644_p2 <= (select_ln27_2_fu_615_p3 or or_ln31_fu_638_p2);
    or_ln31_3_fu_609_p2 <= (tmp_3_fu_592_p3 or rev52_fu_603_p2);
    or_ln31_fu_638_p2 <= (xor_ln31_fu_632_p2 or tmp_4_fu_621_p3);
    output_r_TVALID <= regslice_both_output_r_U_vld_out;
    p_cast_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_22_fu_653_p2),64));
    p_mid1_fu_490_p2 <= std_logic_vector(signed(sext_ln27_1_fu_486_p1) + signed(zext_ln24_reg_818));
    rev52_fu_603_p2 <= (slt51_fu_599_p2 xor ap_const_lv1_1);
    rev_fu_442_p2 <= (slt_fu_438_p2 xor ap_const_lv1_1);
    select_ln24_1_fu_403_p3 <= 
        x_fu_96 when (icmp_ln25_reg_789(0) = '1') else 
        ap_const_lv31_0;
    select_ln24_fu_392_p3 <= 
        y_fu_112 when (icmp_ln25_reg_789(0) = '1') else 
        add_ln24_fu_386_p2;
    select_ln25_fu_541_p3 <= 
        add_ln25_fu_536_p2 when (icmp_ln25_reg_789(0) = '1') else 
        ap_const_lv31_1;
    select_ln27_1_cast37_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln27_1_reg_868),4));
    select_ln27_1_fu_501_p3 <= 
        indvars_iv_next25_mid1_fu_495_p2 when (icmp_ln28_fu_466_p2(0) = '1') else 
        indvars_iv_next2514_fu_480_p2;
    select_ln27_2_fu_615_p3 <= 
        or_ln31_3_fu_609_p2 when (icmp_ln28_reg_857(0) = '1') else 
        or_ln31_1_reg_844;
    select_ln27_3_fu_513_p3 <= 
        indvars_iv_next2514_fu_480_p2 when (icmp_ln28_fu_466_p2(0) = '1') else 
        ky_reg_175;
    select_ln27_fu_472_p3 <= 
        ap_const_lv3_7 when (icmp_ln28_fu_466_p2(0) = '1') else 
        kx_reg_228;
        sext_ln27_1_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv_next2514_fu_480_p2),32));

        sext_ln27_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ky_reg_175),32));

        sext_ln28_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln27_fu_472_p3),32));

    slt51_fu_599_p2 <= "1" when (signed(p_mid1_reg_862) < signed(height_read_reg_728)) else "0";
    slt_fu_438_p2 <= "1" when (signed(empty_reg_838) < signed(height_read_reg_728)) else "0";
    tmp_1_fu_579_p3 <= (trunc_ln27_reg_873 & ap_const_lv2_0);
    tmp_3_fu_592_p3 <= p_mid1_reg_862(31 downto 31);
    tmp_4_fu_621_p3 <= add_ln29_reg_883(31 downto 31);
    tmp_fu_431_p3 <= empty_reg_838(31 downto 31);
    trunc_ln27_fu_509_p1 <= select_ln27_1_fu_501_p3(2 - 1 downto 0);
    xor_ln31_fu_632_p2 <= (icmp_ln31_fu_628_p2 xor ap_const_lv1_1);
    zext_ln24_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_fu_392_p3),32));
    zext_ln25_1_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln24_1_fu_403_p3),32));
    zext_ln25_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_96),32));
end behav;
