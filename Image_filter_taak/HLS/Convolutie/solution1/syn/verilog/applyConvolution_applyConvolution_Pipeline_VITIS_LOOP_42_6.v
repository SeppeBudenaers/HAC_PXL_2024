// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_42_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RFIFONUM,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        m_axi_output_r_AWVALID,
        m_axi_output_r_AWREADY,
        m_axi_output_r_AWADDR,
        m_axi_output_r_AWID,
        m_axi_output_r_AWLEN,
        m_axi_output_r_AWSIZE,
        m_axi_output_r_AWBURST,
        m_axi_output_r_AWLOCK,
        m_axi_output_r_AWCACHE,
        m_axi_output_r_AWPROT,
        m_axi_output_r_AWQOS,
        m_axi_output_r_AWREGION,
        m_axi_output_r_AWUSER,
        m_axi_output_r_WVALID,
        m_axi_output_r_WREADY,
        m_axi_output_r_WDATA,
        m_axi_output_r_WSTRB,
        m_axi_output_r_WLAST,
        m_axi_output_r_WID,
        m_axi_output_r_WUSER,
        m_axi_output_r_ARVALID,
        m_axi_output_r_ARREADY,
        m_axi_output_r_ARADDR,
        m_axi_output_r_ARID,
        m_axi_output_r_ARLEN,
        m_axi_output_r_ARSIZE,
        m_axi_output_r_ARBURST,
        m_axi_output_r_ARLOCK,
        m_axi_output_r_ARCACHE,
        m_axi_output_r_ARPROT,
        m_axi_output_r_ARQOS,
        m_axi_output_r_ARREGION,
        m_axi_output_r_ARUSER,
        m_axi_output_r_RVALID,
        m_axi_output_r_RREADY,
        m_axi_output_r_RDATA,
        m_axi_output_r_RLAST,
        m_axi_output_r_RID,
        m_axi_output_r_RFIFONUM,
        m_axi_output_r_RUSER,
        m_axi_output_r_RRESP,
        m_axi_output_r_BVALID,
        m_axi_output_r_BREADY,
        m_axi_output_r_BRESP,
        m_axi_output_r_BID,
        m_axi_output_r_BUSER,
        channels,
        sum_0_5,
        sum_1_5,
        sum_2_5,
        output_r_offset,
        add_ln26_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [63:0] m_axi_input_r_AWADDR;
output  [0:0] m_axi_input_r_AWID;
output  [31:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [0:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [7:0] m_axi_input_r_WDATA;
output  [0:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [0:0] m_axi_input_r_WID;
output  [0:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [63:0] m_axi_input_r_ARADDR;
output  [0:0] m_axi_input_r_ARID;
output  [31:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [0:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [7:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [0:0] m_axi_input_r_RID;
input  [10:0] m_axi_input_r_RFIFONUM;
input  [0:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [0:0] m_axi_input_r_BID;
input  [0:0] m_axi_input_r_BUSER;
output   m_axi_output_r_AWVALID;
input   m_axi_output_r_AWREADY;
output  [63:0] m_axi_output_r_AWADDR;
output  [0:0] m_axi_output_r_AWID;
output  [31:0] m_axi_output_r_AWLEN;
output  [2:0] m_axi_output_r_AWSIZE;
output  [1:0] m_axi_output_r_AWBURST;
output  [1:0] m_axi_output_r_AWLOCK;
output  [3:0] m_axi_output_r_AWCACHE;
output  [2:0] m_axi_output_r_AWPROT;
output  [3:0] m_axi_output_r_AWQOS;
output  [3:0] m_axi_output_r_AWREGION;
output  [0:0] m_axi_output_r_AWUSER;
output   m_axi_output_r_WVALID;
input   m_axi_output_r_WREADY;
output  [7:0] m_axi_output_r_WDATA;
output  [0:0] m_axi_output_r_WSTRB;
output   m_axi_output_r_WLAST;
output  [0:0] m_axi_output_r_WID;
output  [0:0] m_axi_output_r_WUSER;
output   m_axi_output_r_ARVALID;
input   m_axi_output_r_ARREADY;
output  [63:0] m_axi_output_r_ARADDR;
output  [0:0] m_axi_output_r_ARID;
output  [31:0] m_axi_output_r_ARLEN;
output  [2:0] m_axi_output_r_ARSIZE;
output  [1:0] m_axi_output_r_ARBURST;
output  [1:0] m_axi_output_r_ARLOCK;
output  [3:0] m_axi_output_r_ARCACHE;
output  [2:0] m_axi_output_r_ARPROT;
output  [3:0] m_axi_output_r_ARQOS;
output  [3:0] m_axi_output_r_ARREGION;
output  [0:0] m_axi_output_r_ARUSER;
input   m_axi_output_r_RVALID;
output   m_axi_output_r_RREADY;
input  [7:0] m_axi_output_r_RDATA;
input   m_axi_output_r_RLAST;
input  [0:0] m_axi_output_r_RID;
input  [10:0] m_axi_output_r_RFIFONUM;
input  [0:0] m_axi_output_r_RUSER;
input  [1:0] m_axi_output_r_RRESP;
input   m_axi_output_r_BVALID;
output   m_axi_output_r_BREADY;
input  [1:0] m_axi_output_r_BRESP;
input  [0:0] m_axi_output_r_BID;
input  [0:0] m_axi_output_r_BUSER;
input  [31:0] channels;
input  [31:0] sum_0_5;
input  [31:0] sum_1_5;
input  [31:0] sum_2_5;
input  [63:0] output_r_offset;
input  [63:0] add_ln26_1;

reg ap_idle;
reg m_axi_input_r_RREADY;
reg m_axi_output_r_WVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln42_reg_413;
reg   [0:0] icmp_ln42_reg_413_pp0_iter1_reg;
reg   [0:0] icmp_ln43_reg_427;
reg   [0:0] icmp_ln43_reg_427_pp0_iter1_reg;
reg    ap_predicate_op45_read_state2;
reg    ap_block_state2_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln42_fu_177_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    output_r_blk_n_W;
wire    ap_block_pp0_stage0;
reg    input_r_blk_n_R;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln42_reg_413_pp0_iter2_reg;
wire   [0:0] icmp_ln43_fu_201_p2;
reg   [0:0] icmp_ln43_reg_427_pp0_iter2_reg;
reg   [0:0] xs_sign_reg_431;
reg   [0:0] xs_sign_reg_431_pp0_iter1_reg;
wire   [22:0] trunc_ln342_fu_245_p1;
reg   [22:0] trunc_ln342_reg_436;
wire   [0:0] tmp_fu_259_p3;
reg   [0:0] tmp_reg_441;
wire   [8:0] select_ln18_fu_277_p3;
reg   [8:0] select_ln18_reg_446;
reg   [7:0] input_r_addr_read_reg_451;
wire   [31:0] result_fu_295_p3;
reg   [31:0] result_reg_456;
wire   [0:0] icmp_ln45_fu_311_p2;
reg   [0:0] icmp_ln45_reg_462;
wire   [7:0] select_ln45_fu_339_p3;
wire   [31:0] val_1_fu_399_p3;
reg   [31:0] val_1_reg_473;
wire   [7:0] ap_phi_reg_pp0_iter0_storereflowmerge_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter1_storereflowmerge_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter2_storereflowmerge_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter3_storereflowmerge_reg_155;
reg   [7:0] ap_phi_reg_pp0_iter4_storereflowmerge_reg_155;
reg    ap_block_pp0_stage0_01001;
reg   [30:0] ch_fu_102;
wire   [30:0] add_ln42_fu_183_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_ch_1;
wire   [31:0] zext_ln42_fu_173_p1;
wire   [1:0] dc_fu_211_p4;
wire   [31:0] dc_fu_211_p5;
wire   [31:0] data_fu_223_p1;
wire   [7:0] xs_exp_fu_235_p4;
wire   [8:0] zext_ln317_fu_249_p1;
wire   [8:0] add_ln317_fu_253_p2;
wire   [7:0] sub_ln18_fu_267_p2;
wire  signed [8:0] sext_ln18_fu_273_p1;
wire   [31:0] result_2_fu_290_p2;
wire   [23:0] tmp_1_fu_301_p4;
wire   [0:0] tmp_2_fu_317_p3;
wire   [0:0] or_ln45_fu_334_p2;
wire   [7:0] select_ln45_1_fu_327_p3;
wire   [7:0] trunc_ln45_fu_324_p1;
wire   [24:0] mantissa_fu_347_p4;
wire  signed [31:0] sext_ln18_1_fu_360_p1;
wire   [78:0] zext_ln15_fu_356_p1;
wire   [78:0] zext_ln18_fu_363_p1;
wire   [78:0] lshr_ln18_fu_367_p2;
wire   [78:0] shl_ln18_fu_373_p2;
wire   [31:0] tmp_4_fu_379_p4;
wire   [31:0] tmp_5_fu_389_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ch_fu_102 = 31'd0;
#0 ap_done_reg = 1'b0;
end

applyConvolution_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U25(
    .din0(sum_0_5),
    .din1(sum_1_5),
    .din2(sum_2_5),
    .din3(dc_fu_211_p4),
    .dout(dc_fu_211_p5)
);

applyConvolution_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln43_reg_427_pp0_iter2_reg == 1'd0) & (icmp_ln42_reg_413_pp0_iter2_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter4_storereflowmerge_reg_155 <= input_r_addr_read_reg_451;
        end else if (((icmp_ln43_reg_427_pp0_iter2_reg == 1'd1) & (icmp_ln42_reg_413_pp0_iter2_reg == 1'd1))) begin
            ap_phi_reg_pp0_iter4_storereflowmerge_reg_155 <= select_ln45_fu_339_p3;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter4_storereflowmerge_reg_155 <= ap_phi_reg_pp0_iter3_storereflowmerge_reg_155;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln42_fu_177_p2 == 1'd1))) begin
            ch_fu_102 <= add_ln42_fu_183_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ch_fu_102 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln42_reg_413 <= icmp_ln42_fu_177_p2;
        icmp_ln42_reg_413_pp0_iter1_reg <= icmp_ln42_reg_413;
        icmp_ln43_reg_427 <= icmp_ln43_fu_201_p2;
        icmp_ln43_reg_427_pp0_iter1_reg <= icmp_ln43_reg_427;
        select_ln18_reg_446 <= select_ln18_fu_277_p3;
        tmp_reg_441 <= add_ln317_fu_253_p2[32'd8];
        trunc_ln342_reg_436 <= trunc_ln342_fu_245_p1;
        val_1_reg_473 <= val_1_fu_399_p3;
        xs_sign_reg_431 <= data_fu_223_p1[32'd31];
        xs_sign_reg_431_pp0_iter1_reg <= xs_sign_reg_431;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln42_reg_413_pp0_iter2_reg <= icmp_ln42_reg_413_pp0_iter1_reg;
        icmp_ln43_reg_427_pp0_iter2_reg <= icmp_ln43_reg_427_pp0_iter1_reg;
        icmp_ln45_reg_462 <= icmp_ln45_fu_311_p2;
        input_r_addr_read_reg_451 <= m_axi_input_r_RDATA;
        result_reg_456 <= result_fu_295_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter1_storereflowmerge_reg_155 <= ap_phi_reg_pp0_iter0_storereflowmerge_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_storereflowmerge_reg_155 <= ap_phi_reg_pp0_iter1_storereflowmerge_reg_155;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_storereflowmerge_reg_155 <= ap_phi_reg_pp0_iter2_storereflowmerge_reg_155;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln42_fu_177_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_ch_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_ch_1 = ch_fu_102;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op45_read_state2 == 1'b1))) begin
        input_r_blk_n_R = m_axi_input_r_RVALID;
    end else begin
        input_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op45_read_state2 == 1'b1))) begin
        m_axi_input_r_RREADY = 1'b1;
    end else begin
        m_axi_input_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_output_r_WVALID = 1'b1;
    end else begin
        m_axi_output_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        output_r_blk_n_W = m_axi_output_r_WREADY;
    end else begin
        output_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln317_fu_253_p2 = ($signed(zext_ln317_fu_249_p1) + $signed(9'd385));

assign add_ln42_fu_183_p2 = (ap_sig_allocacmp_ch_1 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter2));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (m_axi_output_r_WREADY == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (m_axi_output_r_WREADY == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter2)));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter2 = ((m_axi_input_r_RVALID == 1'b0) & (ap_predicate_op45_read_state2 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_phi_reg_pp0_iter0_storereflowmerge_reg_155 = 'bx;

always @ (*) begin
    ap_predicate_op45_read_state2 = ((icmp_ln43_reg_427_pp0_iter1_reg == 1'd0) & (icmp_ln42_reg_413_pp0_iter1_reg == 1'd1));
end

assign data_fu_223_p1 = dc_fu_211_p5;

assign dc_fu_211_p4 = ap_sig_allocacmp_ch_1[1:0];

assign icmp_ln42_fu_177_p2 = (($signed(zext_ln42_fu_173_p1) < $signed(channels)) ? 1'b1 : 1'b0);

assign icmp_ln43_fu_201_p2 = ((ap_sig_allocacmp_ch_1 < 31'd3) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_311_p2 = (($signed(tmp_1_fu_301_p4) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign lshr_ln18_fu_367_p2 = zext_ln15_fu_356_p1 >> zext_ln18_fu_363_p1;

assign m_axi_input_r_ARADDR = 64'd0;

assign m_axi_input_r_ARBURST = 2'd0;

assign m_axi_input_r_ARCACHE = 4'd0;

assign m_axi_input_r_ARID = 1'd0;

assign m_axi_input_r_ARLEN = 32'd0;

assign m_axi_input_r_ARLOCK = 2'd0;

assign m_axi_input_r_ARPROT = 3'd0;

assign m_axi_input_r_ARQOS = 4'd0;

assign m_axi_input_r_ARREGION = 4'd0;

assign m_axi_input_r_ARSIZE = 3'd0;

assign m_axi_input_r_ARUSER = 1'd0;

assign m_axi_input_r_ARVALID = 1'b0;

assign m_axi_input_r_AWADDR = 64'd0;

assign m_axi_input_r_AWBURST = 2'd0;

assign m_axi_input_r_AWCACHE = 4'd0;

assign m_axi_input_r_AWID = 1'd0;

assign m_axi_input_r_AWLEN = 32'd0;

assign m_axi_input_r_AWLOCK = 2'd0;

assign m_axi_input_r_AWPROT = 3'd0;

assign m_axi_input_r_AWQOS = 4'd0;

assign m_axi_input_r_AWREGION = 4'd0;

assign m_axi_input_r_AWSIZE = 3'd0;

assign m_axi_input_r_AWUSER = 1'd0;

assign m_axi_input_r_AWVALID = 1'b0;

assign m_axi_input_r_BREADY = 1'b0;

assign m_axi_input_r_WDATA = 8'd0;

assign m_axi_input_r_WID = 1'd0;

assign m_axi_input_r_WLAST = 1'b0;

assign m_axi_input_r_WSTRB = 1'd0;

assign m_axi_input_r_WUSER = 1'd0;

assign m_axi_input_r_WVALID = 1'b0;

assign m_axi_output_r_ARADDR = 64'd0;

assign m_axi_output_r_ARBURST = 2'd0;

assign m_axi_output_r_ARCACHE = 4'd0;

assign m_axi_output_r_ARID = 1'd0;

assign m_axi_output_r_ARLEN = 32'd0;

assign m_axi_output_r_ARLOCK = 2'd0;

assign m_axi_output_r_ARPROT = 3'd0;

assign m_axi_output_r_ARQOS = 4'd0;

assign m_axi_output_r_ARREGION = 4'd0;

assign m_axi_output_r_ARSIZE = 3'd0;

assign m_axi_output_r_ARUSER = 1'd0;

assign m_axi_output_r_ARVALID = 1'b0;

assign m_axi_output_r_AWADDR = 64'd0;

assign m_axi_output_r_AWBURST = 2'd0;

assign m_axi_output_r_AWCACHE = 4'd0;

assign m_axi_output_r_AWID = 1'd0;

assign m_axi_output_r_AWLEN = 32'd0;

assign m_axi_output_r_AWLOCK = 2'd0;

assign m_axi_output_r_AWPROT = 3'd0;

assign m_axi_output_r_AWQOS = 4'd0;

assign m_axi_output_r_AWREGION = 4'd0;

assign m_axi_output_r_AWSIZE = 3'd0;

assign m_axi_output_r_AWUSER = 1'd0;

assign m_axi_output_r_AWVALID = 1'b0;

assign m_axi_output_r_BREADY = 1'b0;

assign m_axi_output_r_RREADY = 1'b0;

assign m_axi_output_r_WDATA = ap_phi_reg_pp0_iter4_storereflowmerge_reg_155;

assign m_axi_output_r_WID = 1'd0;

assign m_axi_output_r_WLAST = 1'b0;

assign m_axi_output_r_WSTRB = 1'd1;

assign m_axi_output_r_WUSER = 1'd0;

assign mantissa_fu_347_p4 = {{{{1'd1}, {trunc_ln342_reg_436}}}, {1'd0}};

assign or_ln45_fu_334_p2 = (tmp_2_fu_317_p3 | icmp_ln45_reg_462);

assign result_2_fu_290_p2 = (32'd0 - val_1_reg_473);

assign result_fu_295_p3 = ((xs_sign_reg_431_pp0_iter1_reg[0:0] == 1'b1) ? result_2_fu_290_p2 : val_1_reg_473);

assign select_ln18_fu_277_p3 = ((tmp_fu_259_p3[0:0] == 1'b1) ? sext_ln18_fu_273_p1 : add_ln317_fu_253_p2);

assign select_ln45_1_fu_327_p3 = ((icmp_ln45_reg_462[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln45_fu_339_p3 = ((or_ln45_fu_334_p2[0:0] == 1'b1) ? select_ln45_1_fu_327_p3 : trunc_ln45_fu_324_p1);

assign sext_ln18_1_fu_360_p1 = $signed(select_ln18_reg_446);

assign sext_ln18_fu_273_p1 = $signed(sub_ln18_fu_267_p2);

assign shl_ln18_fu_373_p2 = zext_ln15_fu_356_p1 << zext_ln18_fu_363_p1;

assign sub_ln18_fu_267_p2 = (8'd127 - xs_exp_fu_235_p4);

assign tmp_1_fu_301_p4 = {{result_fu_295_p3[31:8]}};

assign tmp_2_fu_317_p3 = result_reg_456[32'd31];

assign tmp_4_fu_379_p4 = {{lshr_ln18_fu_367_p2[55:24]}};

assign tmp_5_fu_389_p4 = {{shl_ln18_fu_373_p2[55:24]}};

assign tmp_fu_259_p3 = add_ln317_fu_253_p2[32'd8];

assign trunc_ln342_fu_245_p1 = data_fu_223_p1[22:0];

assign trunc_ln45_fu_324_p1 = result_reg_456[7:0];

assign val_1_fu_399_p3 = ((tmp_reg_441[0:0] == 1'b1) ? tmp_4_fu_379_p4 : tmp_5_fu_389_p4);

assign xs_exp_fu_235_p4 = {{data_fu_223_p1[30:23]}};

assign zext_ln15_fu_356_p1 = mantissa_fu_347_p4;

assign zext_ln18_fu_363_p1 = $unsigned(sext_ln18_1_fu_360_p1);

assign zext_ln317_fu_249_p1 = xs_exp_fu_235_p4;

assign zext_ln42_fu_173_p1 = ap_sig_allocacmp_ch_1;

endmodule //applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_42_6
