// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_41_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        image_r_TVALID,
        output_r_TREADY,
        channels,
        sum_0_5,
        sum_1_5,
        sum_2_5,
        output_r_TDATA,
        output_r_TVALID,
        image_r_TDATA,
        image_r_TREADY
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   image_r_TVALID;
input   output_r_TREADY;
input  [31:0] channels;
input  [31:0] sum_0_5;
input  [31:0] sum_1_5;
input  [31:0] sum_2_5;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input  [31:0] image_r_TDATA;
output   image_r_TREADY;

reg ap_idle;
reg[31:0] output_r_TDATA;
reg output_r_TVALID;
reg image_r_TREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire   [0:0] icmp_ln41_fu_139_p2;
wire   [0:0] icmp_ln42_fu_151_p2;
reg    ap_predicate_op25_read_state1;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln42_reg_375;
reg   [0:0] icmp_ln42_reg_375_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    output_r_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    image_r_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln42_reg_375_pp0_iter1_reg;
reg   [31:0] image_r_read_reg_379;
reg   [31:0] image_r_read_reg_379_pp0_iter1_reg;
reg   [31:0] image_r_read_reg_379_pp0_iter2_reg;
reg   [0:0] xs_sign_reg_384;
reg   [0:0] xs_sign_reg_384_pp0_iter1_reg;
reg   [0:0] xs_sign_reg_384_pp0_iter2_reg;
wire   [22:0] trunc_ln342_fu_195_p1;
reg   [22:0] trunc_ln342_reg_389;
wire   [0:0] tmp_fu_209_p3;
reg   [0:0] tmp_reg_394;
wire   [8:0] select_ln18_fu_227_p3;
reg   [8:0] select_ln18_reg_399;
wire   [31:0] val_1_fu_292_p3;
reg   [31:0] val_1_reg_404;
reg   [31:0] val_1_reg_404_pp0_iter2_reg;
wire   [31:0] result_2_fu_299_p2;
reg   [31:0] result_2_reg_410;
reg   [30:0] ch_fu_86;
wire   [30:0] add_ln41_fu_145_p2;
wire    ap_loop_init;
reg   [30:0] ap_sig_allocacmp_ch_1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] zext_ln44_fu_359_p1;
wire   [31:0] zext_ln41_fu_135_p1;
wire   [1:0] dc_fu_161_p4;
wire   [31:0] dc_fu_161_p5;
wire   [31:0] data_fu_173_p1;
wire   [7:0] xs_exp_fu_185_p4;
wire   [8:0] zext_ln317_fu_199_p1;
wire   [8:0] add_ln317_fu_203_p2;
wire   [7:0] sub_ln18_fu_217_p2;
wire  signed [8:0] sext_ln18_fu_223_p1;
wire   [24:0] mantissa_fu_240_p4;
wire  signed [31:0] sext_ln18_1_fu_253_p1;
wire   [78:0] zext_ln15_fu_249_p1;
wire   [78:0] zext_ln18_fu_256_p1;
wire   [78:0] lshr_ln18_fu_260_p2;
wire   [78:0] shl_ln18_fu_266_p2;
wire   [31:0] tmp_3_fu_272_p4;
wire   [31:0] tmp_4_fu_282_p4;
wire   [31:0] result_fu_304_p3;
wire   [23:0] tmp_1_fu_309_p4;
wire   [0:0] icmp_ln44_fu_319_p2;
wire   [0:0] tmp_2_fu_325_p3;
wire   [0:0] or_ln44_fu_345_p2;
wire   [7:0] select_ln44_1_fu_337_p3;
wire   [7:0] trunc_ln44_fu_333_p1;
wire   [7:0] select_ln44_fu_351_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ch_fu_86 = 31'd0;
#0 ap_done_reg = 1'b0;
end

applyConvolution_mux_3_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_3_2_32_1_1_U24(
    .din0(sum_0_5),
    .din1(sum_1_5),
    .din2(sum_2_5),
    .din3(dc_fu_161_p4),
    .dout(dc_fu_161_p5)
);

applyConvolution_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln41_fu_139_p2 == 1'd1) & (ap_start_int == 1'b1))) begin
            ch_fu_86 <= add_ln41_fu_145_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            ch_fu_86 <= 31'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln42_reg_375 <= icmp_ln42_fu_151_p2;
        icmp_ln42_reg_375_pp0_iter1_reg <= icmp_ln42_reg_375;
        image_r_read_reg_379 <= image_r_TDATA;
        image_r_read_reg_379_pp0_iter1_reg <= image_r_read_reg_379;
        select_ln18_reg_399 <= select_ln18_fu_227_p3;
        tmp_reg_394 <= add_ln317_fu_203_p2[32'd8];
        trunc_ln342_reg_389 <= trunc_ln342_fu_195_p1;
        val_1_reg_404 <= val_1_fu_292_p3;
        xs_sign_reg_384 <= data_fu_173_p1[32'd31];
        xs_sign_reg_384_pp0_iter1_reg <= xs_sign_reg_384;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln42_reg_375_pp0_iter2_reg <= icmp_ln42_reg_375_pp0_iter1_reg;
        image_r_read_reg_379_pp0_iter2_reg <= image_r_read_reg_379_pp0_iter1_reg;
        result_2_reg_410 <= result_2_fu_299_p2;
        val_1_reg_404_pp0_iter2_reg <= val_1_reg_404;
        xs_sign_reg_384_pp0_iter2_reg <= xs_sign_reg_384_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln41_fu_139_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_ch_1 = 31'd0;
    end else begin
        ap_sig_allocacmp_ch_1 = ch_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_predicate_op25_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        image_r_TDATA_blk_n = image_r_TVALID;
    end else begin
        image_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op25_read_state1 == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        image_r_TREADY = 1'b1;
    end else begin
        image_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((icmp_ln42_reg_375_pp0_iter2_reg == 1'd1)) begin
            output_r_TDATA = zext_ln44_fu_359_p1;
        end else if ((icmp_ln42_reg_375_pp0_iter2_reg == 1'd0)) begin
            output_r_TDATA = image_r_read_reg_379_pp0_iter2_reg;
        end else begin
            output_r_TDATA = 'bx;
        end
    end else begin
        output_r_TDATA = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln42_reg_375_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln42_reg_375_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        output_r_TDATA_blk_n = output_r_TREADY;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln42_reg_375_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln42_reg_375_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        output_r_TVALID = 1'b1;
    end else begin
        output_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln317_fu_203_p2 = ($signed(zext_ln317_fu_199_p1) + $signed(9'd385));

assign add_ln41_fu_145_p2 = (ap_sig_allocacmp_ch_1 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((1'b1 == ap_block_state4_io) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((ap_start_int == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_predicate_op25_read_state1 == 1'b1) & (image_r_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state4_io = (((icmp_ln42_reg_375_pp0_iter2_reg == 1'd1) & (output_r_TREADY == 1'b0)) | ((icmp_ln42_reg_375_pp0_iter2_reg == 1'd0) & (output_r_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = (((icmp_ln42_reg_375_pp0_iter2_reg == 1'd1) & (output_r_TREADY == 1'b0)) | ((icmp_ln42_reg_375_pp0_iter2_reg == 1'd0) & (output_r_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op25_read_state1 = ((icmp_ln42_fu_151_p2 == 1'd0) & (icmp_ln41_fu_139_p2 == 1'd1));
end

assign data_fu_173_p1 = dc_fu_161_p5;

assign dc_fu_161_p4 = ap_sig_allocacmp_ch_1[1:0];

assign icmp_ln41_fu_139_p2 = (($signed(zext_ln41_fu_135_p1) < $signed(channels)) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_151_p2 = ((ap_sig_allocacmp_ch_1 < 31'd3) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_319_p2 = (($signed(tmp_1_fu_309_p4) > $signed(24'd0)) ? 1'b1 : 1'b0);

assign lshr_ln18_fu_260_p2 = zext_ln15_fu_249_p1 >> zext_ln18_fu_256_p1;

assign mantissa_fu_240_p4 = {{{{1'd1}, {trunc_ln342_reg_389}}}, {1'd0}};

assign or_ln44_fu_345_p2 = (tmp_2_fu_325_p3 | icmp_ln44_fu_319_p2);

assign result_2_fu_299_p2 = (32'd0 - val_1_reg_404);

assign result_fu_304_p3 = ((xs_sign_reg_384_pp0_iter2_reg[0:0] == 1'b1) ? result_2_reg_410 : val_1_reg_404_pp0_iter2_reg);

assign select_ln18_fu_227_p3 = ((tmp_fu_209_p3[0:0] == 1'b1) ? sext_ln18_fu_223_p1 : add_ln317_fu_203_p2);

assign select_ln44_1_fu_337_p3 = ((icmp_ln44_fu_319_p2[0:0] == 1'b1) ? 8'd255 : 8'd0);

assign select_ln44_fu_351_p3 = ((or_ln44_fu_345_p2[0:0] == 1'b1) ? select_ln44_1_fu_337_p3 : trunc_ln44_fu_333_p1);

assign sext_ln18_1_fu_253_p1 = $signed(select_ln18_reg_399);

assign sext_ln18_fu_223_p1 = $signed(sub_ln18_fu_217_p2);

assign shl_ln18_fu_266_p2 = zext_ln15_fu_249_p1 << zext_ln18_fu_256_p1;

assign sub_ln18_fu_217_p2 = (8'd127 - xs_exp_fu_185_p4);

assign tmp_1_fu_309_p4 = {{result_fu_304_p3[31:8]}};

assign tmp_2_fu_325_p3 = result_fu_304_p3[32'd31];

assign tmp_3_fu_272_p4 = {{lshr_ln18_fu_260_p2[55:24]}};

assign tmp_4_fu_282_p4 = {{shl_ln18_fu_266_p2[55:24]}};

assign tmp_fu_209_p3 = add_ln317_fu_203_p2[32'd8];

assign trunc_ln342_fu_195_p1 = data_fu_173_p1[22:0];

assign trunc_ln44_fu_333_p1 = result_fu_304_p3[7:0];

assign val_1_fu_292_p3 = ((tmp_reg_394[0:0] == 1'b1) ? tmp_3_fu_272_p4 : tmp_4_fu_282_p4);

assign xs_exp_fu_185_p4 = {{data_fu_173_p1[30:23]}};

assign zext_ln15_fu_249_p1 = mantissa_fu_240_p4;

assign zext_ln18_fu_256_p1 = $unsigned(sext_ln18_1_fu_253_p1);

assign zext_ln317_fu_199_p1 = xs_exp_fu_185_p4;

assign zext_ln41_fu_135_p1 = ap_sig_allocacmp_ch_1;

assign zext_ln44_fu_359_p1 = select_ln44_fu_351_p3;

endmodule //applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_41_6
