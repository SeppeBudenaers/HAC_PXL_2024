-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity applyConvolution is
generic (
    C_M_AXI_INPUT_R_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_INPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_OUTPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONV_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONV_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_input_r_AWVALID : OUT STD_LOGIC;
    m_axi_input_r_AWREADY : IN STD_LOGIC;
    m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_input_r_WVALID : OUT STD_LOGIC;
    m_axi_input_r_WREADY : IN STD_LOGIC;
    m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_input_r_WLAST : OUT STD_LOGIC;
    m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_input_r_ARVALID : OUT STD_LOGIC;
    m_axi_input_r_ARREADY : IN STD_LOGIC;
    m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_input_r_RVALID : IN STD_LOGIC;
    m_axi_input_r_RREADY : OUT STD_LOGIC;
    m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_input_r_RLAST : IN STD_LOGIC;
    m_axi_input_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BVALID : IN STD_LOGIC;
    m_axi_input_r_BREADY : OUT STD_LOGIC;
    m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_input_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_BUSER_WIDTH-1 downto 0);
    m_axi_output_r_AWVALID : OUT STD_LOGIC;
    m_axi_output_r_AWREADY : IN STD_LOGIC;
    m_axi_output_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_output_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_output_r_WVALID : OUT STD_LOGIC;
    m_axi_output_r_WREADY : IN STD_LOGIC;
    m_axi_output_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_output_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_output_r_WLAST : OUT STD_LOGIC;
    m_axi_output_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_output_r_ARVALID : OUT STD_LOGIC;
    m_axi_output_r_ARREADY : IN STD_LOGIC;
    m_axi_output_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_output_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_output_r_RVALID : IN STD_LOGIC;
    m_axi_output_r_RREADY : OUT STD_LOGIC;
    m_axi_output_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_output_r_RLAST : IN STD_LOGIC;
    m_axi_output_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_BVALID : IN STD_LOGIC;
    m_axi_output_r_BREADY : OUT STD_LOGIC;
    m_axi_output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_output_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_conv_AWVALID : IN STD_LOGIC;
    s_axi_conv_AWREADY : OUT STD_LOGIC;
    s_axi_conv_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_ADDR_WIDTH-1 downto 0);
    s_axi_conv_WVALID : IN STD_LOGIC;
    s_axi_conv_WREADY : OUT STD_LOGIC;
    s_axi_conv_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH-1 downto 0);
    s_axi_conv_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH/8-1 downto 0);
    s_axi_conv_ARVALID : IN STD_LOGIC;
    s_axi_conv_ARREADY : OUT STD_LOGIC;
    s_axi_conv_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONV_ADDR_WIDTH-1 downto 0);
    s_axi_conv_RVALID : OUT STD_LOGIC;
    s_axi_conv_RREADY : IN STD_LOGIC;
    s_axi_conv_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONV_DATA_WIDTH-1 downto 0);
    s_axi_conv_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_conv_BVALID : OUT STD_LOGIC;
    s_axi_conv_BREADY : IN STD_LOGIC;
    s_axi_conv_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of applyConvolution is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "applyConvolution_applyConvolution,hls_ip_2023_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.312000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=6596,HLS_SYN_LUT=6956,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv33_1FFFFFFFD : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111101";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv63_3 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_r : STD_LOGIC_VECTOR (63 downto 0);
    signal out_r : STD_LOGIC_VECTOR (63 downto 0);
    signal width : STD_LOGIC_VECTOR (31 downto 0);
    signal height : STD_LOGIC_VECTOR (31 downto 0);
    signal channels : STD_LOGIC_VECTOR (31 downto 0);
    signal kernel_ce0 : STD_LOGIC;
    signal kernel_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal output_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal output_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal channels_read_reg_1049 : STD_LOGIC_VECTOR (31 downto 0);
    signal height_read_reg_1059 : STD_LOGIC_VECTOR (31 downto 0);
    signal width_read_reg_1067 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r_read_reg_1077 : STD_LOGIC_VECTOR (63 downto 0);
    signal image_r_read_reg_1083 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln25_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_1124 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp222_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp222_reg_1129 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_24_fu_467_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_24_reg_1135 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_1_reg_1140 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal wide_trip_count_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal wide_trip_count_reg_1145 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal wide_trip_count37_fu_494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln25_2_reg_1157 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln25_fu_511_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln25_reg_1167 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal empty_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal channels_cast19_fu_536_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal channels_cast19_reg_1178 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln25_fu_548_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln25_reg_1183 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln25_reg_1188 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln42_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_25_fu_577_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_25_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_413_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln6_reg_1209 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln25_3_fu_604_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln25_3_reg_1217 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal select_ln25_1_fu_631_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln25_1_reg_1231 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln25_2_fu_639_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln25_2_reg_1238 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln25_3_reg_1255 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln25_1_fu_655_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_1_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal add_ln25_2_fu_658_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln25_2_reg_1266 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_3_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_3_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_409_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln26_reg_1286 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln28_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_reg_1291 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_26_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_26_reg_1296 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal or_ln32_1_fu_704_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_1_reg_1302 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln28_1_fu_716_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_1_reg_1310 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln29_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_1315 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_734_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_reg_1320 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_1_fu_742_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln28_1_reg_1325 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln28_2_fu_760_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_2_reg_1330 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_mid13_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_mid13_reg_1336 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_3_fu_779_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln28_3_reg_1342 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln28_fu_787_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln28_reg_1347 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln28_5_fu_791_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln28_5_reg_1352 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_807_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_reg_1357 : STD_LOGIC_VECTOR (33 downto 0);
    signal add_ln30_2_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln30_2_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_fu_817_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln26_reg_1368 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal or_ln32_2_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_2_reg_1383 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln29_fu_941_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln29_reg_1387 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_29_fu_950_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_29_reg_1392 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_858_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln28_reg_1397 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_429_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp1_reg_1402 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_fu_956_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_reg_1407 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal add_ln30_1_fu_964_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_1_reg_1412 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal kernel_addr_reg_1418 : STD_LOGIC_VECTOR (3 downto 0);
    signal kernel_load_reg_1428 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal add_ln29_1_fu_991_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal add_ln26_1_fu_999_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln26_1_reg_1438 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_applyConvolution_Pipeline_1_fu_363_ap_start : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_363_ap_done : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_363_ap_idle : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_363_ap_ready : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_363_sum_2_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_1_fu_363_sum_2_2_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_363_sum_1_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_1_fu_363_sum_1_2_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_1_fu_363_sum_0_21_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_1_fu_363_sum_0_21_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_start : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_done : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_idle : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_ready : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_2_6_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_2_6_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_1_6_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_1_6_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_0_6_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_0_6_out_ap_vld : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_start : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_done : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_idle : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_ready : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWVALID : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WVALID : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WLAST : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARVALID : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_RREADY : STD_LOGIC;
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_BREADY : STD_LOGIC;
    signal input_r_AWREADY : STD_LOGIC;
    signal input_r_WREADY : STD_LOGIC;
    signal input_r_ARVALID : STD_LOGIC;
    signal input_r_ARREADY : STD_LOGIC;
    signal input_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_RVALID : STD_LOGIC;
    signal input_r_RREADY : STD_LOGIC;
    signal input_r_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal input_r_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal input_r_BVALID : STD_LOGIC;
    signal output_r_AWVALID : STD_LOGIC;
    signal output_r_AWREADY : STD_LOGIC;
    signal output_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r_WVALID : STD_LOGIC;
    signal output_r_WREADY : STD_LOGIC;
    signal output_r_ARREADY : STD_LOGIC;
    signal output_r_RVALID : STD_LOGIC;
    signal output_r_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal output_r_RFIFONUM : STD_LOGIC_VECTOR (10 downto 0);
    signal output_r_BVALID : STD_LOGIC;
    signal output_r_BREADY : STD_LOGIC;
    signal ky_reg_241 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_253 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_reg_264 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum_2_5_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_2_9_phi_fu_331_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_5_reg_285 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_1_9_phi_fu_343_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_0_5_reg_295 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_sum_0_9_phi_fu_355_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar4_reg_305 : STD_LOGIC_VECTOR (1 downto 0);
    signal kx_reg_316 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_2_9_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_9_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_0_9_reg_351 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_applyConvolution_Pipeline_1_fu_363_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln25_3_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal p_cast_fu_969_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_132 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln26_2_fu_822_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln28_fu_710_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_0_1_fu_136 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_1_1_fu_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sum_2_1_fu_144 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal y_fu_148 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal indvar_flatten12_fu_152 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_409_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_413_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_433_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln6_fu_437_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln25_fu_441_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp222_fu_447_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln25_1_fu_453_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln25_1_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln6_fu_437_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln34_fu_459_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal channels_cast_fu_508_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal cmp28_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln25_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln25_fu_522_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln25_fu_539_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal xor_ln25_fu_542_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln25_2_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln42_fu_566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln42_fu_569_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln26_1_fu_590_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln26_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_1_fu_625_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln28_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_687_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next2317_fu_750_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln28_fu_722_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln28_1_fu_756_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_next23_mid1_fu_773_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln29_fu_803_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln29_fu_799_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_858_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_866_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_3_cast43_fu_863_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal slt70_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_879_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev71_fu_890_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_3_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_919_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln32_fu_923_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_912_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_4_fu_902_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_28_fu_873_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln29_cast_fu_946_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln30_3_fu_960_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_2_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_413_ce : STD_LOGIC;
    signal grp_fu_417_ce : STD_LOGIC;
    signal grp_fu_433_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal grp_fu_409_p00 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_413_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_417_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_433_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_858_p00 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component applyConvolution_applyConvolution_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_2_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_2_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_2_2_out_ap_vld : OUT STD_LOGIC;
        sum_1_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_1_2_out_ap_vld : OUT STD_LOGIC;
        sum_0_21_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_0_21_out_ap_vld : OUT STD_LOGIC );
    end component;


    component applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_34_5 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sum_2_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_1_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_0_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        channels : IN STD_LOGIC_VECTOR (31 downto 0);
        add_ln30_1 : IN STD_LOGIC_VECTOR (63 downto 0);
        kernel_load : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_2_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_2_6_out_ap_vld : OUT STD_LOGIC;
        sum_1_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_1_6_out_ap_vld : OUT STD_LOGIC;
        sum_0_6_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_0_6_out_ap_vld : OUT STD_LOGIC );
    end component;


    component applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_42_6 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_AWVALID : OUT STD_LOGIC;
        m_axi_output_r_AWREADY : IN STD_LOGIC;
        m_axi_output_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WVALID : OUT STD_LOGIC;
        m_axi_output_r_WREADY : IN STD_LOGIC;
        m_axi_output_r_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_output_r_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WLAST : OUT STD_LOGIC;
        m_axi_output_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_ARVALID : OUT STD_LOGIC;
        m_axi_output_r_ARREADY : IN STD_LOGIC;
        m_axi_output_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_output_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RVALID : IN STD_LOGIC;
        m_axi_output_r_RREADY : OUT STD_LOGIC;
        m_axi_output_r_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_output_r_RLAST : IN STD_LOGIC;
        m_axi_output_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RFIFONUM : IN STD_LOGIC_VECTOR (10 downto 0);
        m_axi_output_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_BVALID : IN STD_LOGIC;
        m_axi_output_r_BREADY : OUT STD_LOGIC;
        m_axi_output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        channels : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_0_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_1_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        sum_2_5 : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r : IN STD_LOGIC_VECTOR (63 downto 0);
        add_ln26_1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component applyConvolution_mul_31ns_32ns_63_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component applyConvolution_mul_32ns_32ns_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component applyConvolution_mul_32s_32s_32_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component applyConvolution_mul_34s_32ns_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (33 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component applyConvolution_mul_31ns_64s_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component applyConvolution_mul_2ns_64s_64_3_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component applyConvolution_kernel_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component applyConvolution_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        image_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component applyConvolution_conv_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        width : OUT STD_LOGIC_VECTOR (31 downto 0);
        height : OUT STD_LOGIC_VECTOR (31 downto 0);
        channels : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component applyConvolution_input_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component applyConvolution_output_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (10 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    kernel_U : component applyConvolution_kernel_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => kernel_addr_reg_1418,
        ce0 => kernel_ce0,
        q0 => kernel_q0);

    grp_applyConvolution_Pipeline_1_fu_363 : component applyConvolution_applyConvolution_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_applyConvolution_Pipeline_1_fu_363_ap_start,
        ap_done => grp_applyConvolution_Pipeline_1_fu_363_ap_done,
        ap_idle => grp_applyConvolution_Pipeline_1_fu_363_ap_idle,
        ap_ready => grp_applyConvolution_Pipeline_1_fu_363_ap_ready,
        sum_2_1 => sum_2_1_fu_144,
        sum_1_1 => sum_1_1_fu_140,
        sum_0_1 => sum_0_1_fu_136,
        sum_2_2_out => grp_applyConvolution_Pipeline_1_fu_363_sum_2_2_out,
        sum_2_2_out_ap_vld => grp_applyConvolution_Pipeline_1_fu_363_sum_2_2_out_ap_vld,
        sum_1_2_out => grp_applyConvolution_Pipeline_1_fu_363_sum_1_2_out,
        sum_1_2_out_ap_vld => grp_applyConvolution_Pipeline_1_fu_363_sum_1_2_out_ap_vld,
        sum_0_21_out => grp_applyConvolution_Pipeline_1_fu_363_sum_0_21_out,
        sum_0_21_out_ap_vld => grp_applyConvolution_Pipeline_1_fu_363_sum_0_21_out_ap_vld);

    grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373 : component applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_34_5
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_start,
        ap_done => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_done,
        ap_idle => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_idle,
        ap_ready => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_ready,
        sum_2_5 => sum_2_5_reg_275,
        sum_1_5 => sum_1_5_reg_285,
        sum_0_5 => sum_0_5_reg_295,
        m_axi_input_r_AWVALID => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => input_r_ARREADY,
        m_axi_input_r_ARADDR => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => input_r_RVALID,
        m_axi_input_r_RREADY => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => input_r_RDATA,
        m_axi_input_r_RLAST => ap_const_logic_0,
        m_axi_input_r_RID => ap_const_lv1_0,
        m_axi_input_r_RFIFONUM => input_r_RFIFONUM,
        m_axi_input_r_RUSER => ap_const_lv1_0,
        m_axi_input_r_RRESP => ap_const_lv2_0,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        channels => channels_read_reg_1049,
        add_ln30_1 => add_ln30_1_reg_1412,
        kernel_load => kernel_load_reg_1428,
        sum_2_6_out => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_2_6_out,
        sum_2_6_out_ap_vld => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_2_6_out_ap_vld,
        sum_1_6_out => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_1_6_out,
        sum_1_6_out_ap_vld => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_1_6_out_ap_vld,
        sum_0_6_out => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_0_6_out,
        sum_0_6_out_ap_vld => grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_0_6_out_ap_vld);

    grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392 : component applyConvolution_applyConvolution_Pipeline_VITIS_LOOP_42_6
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_start,
        ap_done => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_done,
        ap_idle => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_idle,
        ap_ready => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_ready,
        m_axi_input_r_AWVALID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => ap_const_logic_0,
        m_axi_input_r_AWADDR => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => ap_const_logic_0,
        m_axi_input_r_WDATA => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => input_r_ARREADY,
        m_axi_input_r_ARADDR => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => input_r_RVALID,
        m_axi_input_r_RREADY => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => input_r_RDATA,
        m_axi_input_r_RLAST => ap_const_logic_0,
        m_axi_input_r_RID => ap_const_lv1_0,
        m_axi_input_r_RFIFONUM => input_r_RFIFONUM,
        m_axi_input_r_RUSER => ap_const_lv1_0,
        m_axi_input_r_RRESP => ap_const_lv2_0,
        m_axi_input_r_BVALID => ap_const_logic_0,
        m_axi_input_r_BREADY => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => ap_const_lv2_0,
        m_axi_input_r_BID => ap_const_lv1_0,
        m_axi_input_r_BUSER => ap_const_lv1_0,
        m_axi_output_r_AWVALID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWVALID,
        m_axi_output_r_AWREADY => output_r_AWREADY,
        m_axi_output_r_AWADDR => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWADDR,
        m_axi_output_r_AWID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWID,
        m_axi_output_r_AWLEN => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWLEN,
        m_axi_output_r_AWSIZE => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWSIZE,
        m_axi_output_r_AWBURST => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWBURST,
        m_axi_output_r_AWLOCK => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWLOCK,
        m_axi_output_r_AWCACHE => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWCACHE,
        m_axi_output_r_AWPROT => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWPROT,
        m_axi_output_r_AWQOS => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWQOS,
        m_axi_output_r_AWREGION => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWREGION,
        m_axi_output_r_AWUSER => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWUSER,
        m_axi_output_r_WVALID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WVALID,
        m_axi_output_r_WREADY => output_r_WREADY,
        m_axi_output_r_WDATA => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WDATA,
        m_axi_output_r_WSTRB => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WSTRB,
        m_axi_output_r_WLAST => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WLAST,
        m_axi_output_r_WID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WID,
        m_axi_output_r_WUSER => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WUSER,
        m_axi_output_r_ARVALID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARVALID,
        m_axi_output_r_ARREADY => ap_const_logic_0,
        m_axi_output_r_ARADDR => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARADDR,
        m_axi_output_r_ARID => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARID,
        m_axi_output_r_ARLEN => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARLEN,
        m_axi_output_r_ARSIZE => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARSIZE,
        m_axi_output_r_ARBURST => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARBURST,
        m_axi_output_r_ARLOCK => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARLOCK,
        m_axi_output_r_ARCACHE => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARCACHE,
        m_axi_output_r_ARPROT => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARPROT,
        m_axi_output_r_ARQOS => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARQOS,
        m_axi_output_r_ARREGION => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARREGION,
        m_axi_output_r_ARUSER => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_ARUSER,
        m_axi_output_r_RVALID => ap_const_logic_0,
        m_axi_output_r_RREADY => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_RREADY,
        m_axi_output_r_RDATA => ap_const_lv8_0,
        m_axi_output_r_RLAST => ap_const_logic_0,
        m_axi_output_r_RID => ap_const_lv1_0,
        m_axi_output_r_RFIFONUM => ap_const_lv11_0,
        m_axi_output_r_RUSER => ap_const_lv1_0,
        m_axi_output_r_RRESP => ap_const_lv2_0,
        m_axi_output_r_BVALID => output_r_BVALID,
        m_axi_output_r_BREADY => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_BREADY,
        m_axi_output_r_BRESP => ap_const_lv2_0,
        m_axi_output_r_BID => ap_const_lv1_0,
        m_axi_output_r_BUSER => ap_const_lv1_0,
        channels => channels_read_reg_1049,
        sum_0_5 => sum_0_5_reg_295,
        sum_1_5 => sum_1_5_reg_285,
        sum_2_5 => sum_2_5_reg_275,
        out_r => out_r_read_reg_1077,
        add_ln26_1 => add_ln26_1_reg_1438);

    control_s_axi_U : component applyConvolution_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        image_r => image_r,
        out_r => out_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    conv_s_axi_U : component applyConvolution_conv_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONV_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONV_DATA_WIDTH)
    port map (
        AWVALID => s_axi_conv_AWVALID,
        AWREADY => s_axi_conv_AWREADY,
        AWADDR => s_axi_conv_AWADDR,
        WVALID => s_axi_conv_WVALID,
        WREADY => s_axi_conv_WREADY,
        WDATA => s_axi_conv_WDATA,
        WSTRB => s_axi_conv_WSTRB,
        ARVALID => s_axi_conv_ARVALID,
        ARREADY => s_axi_conv_ARREADY,
        ARADDR => s_axi_conv_ARADDR,
        RVALID => s_axi_conv_RVALID,
        RREADY => s_axi_conv_RREADY,
        RDATA => s_axi_conv_RDATA,
        RRESP => s_axi_conv_RRESP,
        BVALID => s_axi_conv_BVALID,
        BREADY => s_axi_conv_BREADY,
        BRESP => s_axi_conv_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        width => width,
        height => height,
        channels => channels);

    input_r_m_axi_U : component applyConvolution_input_r_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_R_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_input_r_AWVALID,
        AWREADY => m_axi_input_r_AWREADY,
        AWADDR => m_axi_input_r_AWADDR,
        AWID => m_axi_input_r_AWID,
        AWLEN => m_axi_input_r_AWLEN,
        AWSIZE => m_axi_input_r_AWSIZE,
        AWBURST => m_axi_input_r_AWBURST,
        AWLOCK => m_axi_input_r_AWLOCK,
        AWCACHE => m_axi_input_r_AWCACHE,
        AWPROT => m_axi_input_r_AWPROT,
        AWQOS => m_axi_input_r_AWQOS,
        AWREGION => m_axi_input_r_AWREGION,
        AWUSER => m_axi_input_r_AWUSER,
        WVALID => m_axi_input_r_WVALID,
        WREADY => m_axi_input_r_WREADY,
        WDATA => m_axi_input_r_WDATA,
        WSTRB => m_axi_input_r_WSTRB,
        WLAST => m_axi_input_r_WLAST,
        WID => m_axi_input_r_WID,
        WUSER => m_axi_input_r_WUSER,
        ARVALID => m_axi_input_r_ARVALID,
        ARREADY => m_axi_input_r_ARREADY,
        ARADDR => m_axi_input_r_ARADDR,
        ARID => m_axi_input_r_ARID,
        ARLEN => m_axi_input_r_ARLEN,
        ARSIZE => m_axi_input_r_ARSIZE,
        ARBURST => m_axi_input_r_ARBURST,
        ARLOCK => m_axi_input_r_ARLOCK,
        ARCACHE => m_axi_input_r_ARCACHE,
        ARPROT => m_axi_input_r_ARPROT,
        ARQOS => m_axi_input_r_ARQOS,
        ARREGION => m_axi_input_r_ARREGION,
        ARUSER => m_axi_input_r_ARUSER,
        RVALID => m_axi_input_r_RVALID,
        RREADY => m_axi_input_r_RREADY,
        RDATA => m_axi_input_r_RDATA,
        RLAST => m_axi_input_r_RLAST,
        RID => m_axi_input_r_RID,
        RUSER => m_axi_input_r_RUSER,
        RRESP => m_axi_input_r_RRESP,
        BVALID => m_axi_input_r_BVALID,
        BREADY => m_axi_input_r_BREADY,
        BRESP => m_axi_input_r_BRESP,
        BID => m_axi_input_r_BID,
        BUSER => m_axi_input_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => input_r_ARVALID,
        I_ARREADY => input_r_ARREADY,
        I_ARADDR => input_r_ARADDR,
        I_ARLEN => input_r_ARLEN,
        I_RVALID => input_r_RVALID,
        I_RREADY => input_r_RREADY,
        I_RDATA => input_r_RDATA,
        I_RFIFONUM => input_r_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => input_r_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => input_r_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => input_r_BVALID,
        I_BREADY => ap_const_logic_0);

    output_r_m_axi_U : component applyConvolution_output_r_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_R_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 11,
        USER_DW => 8,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_output_r_AWVALID,
        AWREADY => m_axi_output_r_AWREADY,
        AWADDR => m_axi_output_r_AWADDR,
        AWID => m_axi_output_r_AWID,
        AWLEN => m_axi_output_r_AWLEN,
        AWSIZE => m_axi_output_r_AWSIZE,
        AWBURST => m_axi_output_r_AWBURST,
        AWLOCK => m_axi_output_r_AWLOCK,
        AWCACHE => m_axi_output_r_AWCACHE,
        AWPROT => m_axi_output_r_AWPROT,
        AWQOS => m_axi_output_r_AWQOS,
        AWREGION => m_axi_output_r_AWREGION,
        AWUSER => m_axi_output_r_AWUSER,
        WVALID => m_axi_output_r_WVALID,
        WREADY => m_axi_output_r_WREADY,
        WDATA => m_axi_output_r_WDATA,
        WSTRB => m_axi_output_r_WSTRB,
        WLAST => m_axi_output_r_WLAST,
        WID => m_axi_output_r_WID,
        WUSER => m_axi_output_r_WUSER,
        ARVALID => m_axi_output_r_ARVALID,
        ARREADY => m_axi_output_r_ARREADY,
        ARADDR => m_axi_output_r_ARADDR,
        ARID => m_axi_output_r_ARID,
        ARLEN => m_axi_output_r_ARLEN,
        ARSIZE => m_axi_output_r_ARSIZE,
        ARBURST => m_axi_output_r_ARBURST,
        ARLOCK => m_axi_output_r_ARLOCK,
        ARCACHE => m_axi_output_r_ARCACHE,
        ARPROT => m_axi_output_r_ARPROT,
        ARQOS => m_axi_output_r_ARQOS,
        ARREGION => m_axi_output_r_ARREGION,
        ARUSER => m_axi_output_r_ARUSER,
        RVALID => m_axi_output_r_RVALID,
        RREADY => m_axi_output_r_RREADY,
        RDATA => m_axi_output_r_RDATA,
        RLAST => m_axi_output_r_RLAST,
        RID => m_axi_output_r_RID,
        RUSER => m_axi_output_r_RUSER,
        RRESP => m_axi_output_r_RRESP,
        BVALID => m_axi_output_r_BVALID,
        BREADY => m_axi_output_r_BREADY,
        BRESP => m_axi_output_r_BRESP,
        BID => m_axi_output_r_BID,
        BUSER => m_axi_output_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => output_r_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => output_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => output_r_RDATA,
        I_RFIFONUM => output_r_RFIFONUM,
        I_AWVALID => output_r_AWVALID,
        I_AWREADY => output_r_AWREADY,
        I_AWADDR => output_r_AWADDR,
        I_AWLEN => output_r_AWLEN,
        I_WVALID => output_r_WVALID,
        I_WREADY => output_r_WREADY,
        I_WDATA => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WDATA,
        I_WSTRB => grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WSTRB,
        I_BVALID => output_r_BVALID,
        I_BREADY => output_r_BREADY);

    mul_31ns_32ns_63_3_1_U34 : component applyConvolution_mul_31ns_32ns_63_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 63)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_409_p0,
        din1 => grp_fu_409_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_409_p2);

    mul_32ns_32ns_64_3_1_U35 : component applyConvolution_mul_32ns_32ns_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_413_p0,
        din1 => grp_fu_413_p1,
        ce => grp_fu_413_ce,
        dout => grp_fu_413_p2);

    mul_32ns_32ns_64_3_1_U36 : component applyConvolution_mul_32ns_32ns_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_417_p0,
        din1 => grp_fu_417_p1,
        ce => grp_fu_417_ce,
        dout => grp_fu_417_p2);

    mul_32s_32s_32_3_1_U37 : component applyConvolution_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => mul_ln25_1_reg_1140,
        din1 => height_read_reg_1059,
        ce => ap_const_logic_1,
        dout => grp_fu_421_p2);

    mul_32s_32s_32_3_1_U38 : component applyConvolution_mul_32s_32s_32_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => width_read_reg_1067,
        din1 => channels_read_reg_1049,
        ce => ap_const_logic_1,
        dout => grp_fu_425_p2);

    mul_34s_32ns_64_3_1_U39 : component applyConvolution_mul_34s_32ns_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 34,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_1357,
        din1 => grp_fu_429_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_429_p2);

    mul_31ns_64s_64_3_1_U40 : component applyConvolution_mul_31ns_64s_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 31,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_433_p0,
        din1 => mul_ln25_reg_1188,
        ce => grp_fu_433_ce,
        dout => grp_fu_433_p2);

    mul_2ns_64s_64_3_1_U41 : component applyConvolution_mul_2ns_64s_64_3_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 2,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_858_p0,
        din1 => mul_ln25_reg_1188,
        ce => ap_const_logic_1,
        dout => grp_fu_858_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_applyConvolution_Pipeline_1_fu_363_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_applyConvolution_Pipeline_1_fu_363_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln25_3_fu_599_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    grp_applyConvolution_Pipeline_1_fu_363_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_applyConvolution_Pipeline_1_fu_363_ap_ready = ap_const_logic_1)) then 
                    grp_applyConvolution_Pipeline_1_fu_363_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                    grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_ready = ap_const_logic_1)) then 
                    grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                    grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_ready = ap_const_logic_1)) then 
                    grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar4_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                indvar4_reg_305 <= add_ln29_1_fu_991_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                indvar4_reg_305 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    indvar_flatten12_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten12_fu_152 <= ap_const_lv64_0;
            elsif (((icmp_ln28_fu_710_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                indvar_flatten12_fu_152 <= add_ln25_3_reg_1217;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                indvar_flatten_reg_253 <= add_ln28_1_reg_1310;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                indvar_flatten_reg_253 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    indvar_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                indvar_reg_264 <= select_ln28_2_reg_1330;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                indvar_reg_264 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    kx_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                kx_reg_316 <= add_ln29_reg_1387;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                kx_reg_316 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    ky_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                ky_reg_241 <= select_ln28_5_reg_1352;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                ky_reg_241 <= ap_const_lv3_7;
            end if; 
        end if;
    end process;

    sum_0_5_reg_295_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                sum_0_5_reg_295 <= ap_phi_mux_sum_0_9_phi_fu_355_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_0_5_reg_295 <= grp_applyConvolution_Pipeline_1_fu_363_sum_0_21_out;
            end if; 
        end if;
    end process;

    sum_0_9_reg_351_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln32_2_reg_1383 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                sum_0_9_reg_351 <= sum_0_5_reg_295;
            elsif (((or_ln32_2_reg_1383 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                sum_0_9_reg_351 <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_0_6_out;
            end if; 
        end if;
    end process;

    sum_1_5_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                sum_1_5_reg_285 <= ap_phi_mux_sum_1_9_phi_fu_343_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_1_5_reg_285 <= grp_applyConvolution_Pipeline_1_fu_363_sum_1_2_out;
            end if; 
        end if;
    end process;

    sum_1_9_reg_339_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln32_2_reg_1383 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                sum_1_9_reg_339 <= sum_1_5_reg_285;
            elsif (((or_ln32_2_reg_1383 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                sum_1_9_reg_339 <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_1_6_out;
            end if; 
        end if;
    end process;

    sum_2_5_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                sum_2_5_reg_275 <= ap_phi_mux_sum_2_9_phi_fu_331_p4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                sum_2_5_reg_275 <= grp_applyConvolution_Pipeline_1_fu_363_sum_2_2_out;
            end if; 
        end if;
    end process;

    sum_2_9_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_ln32_2_reg_1383 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                sum_2_9_reg_327 <= sum_2_5_reg_275;
            elsif (((or_ln32_2_reg_1383 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                sum_2_9_reg_327 <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_2_6_out;
            end if; 
        end if;
    end process;

    x_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_fu_132 <= ap_const_lv31_0;
            elsif (((icmp_ln28_fu_710_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                x_fu_132 <= add_ln26_2_fu_822_p2;
            end if; 
        end if;
    end process;

    y_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_fu_148 <= ap_const_lv31_0;
            elsif (((icmp_ln28_fu_710_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                y_fu_148 <= select_ln25_2_reg_1238;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln25_2_reg_1266 <= add_ln25_2_fu_658_p2;
                mul_ln26_reg_1286 <= grp_fu_409_p2;
                    zext_ln25_1_reg_1260(30 downto 0) <= zext_ln25_1_fu_655_p1(30 downto 0);
                    zext_ln26_3_reg_1272(30 downto 0) <= zext_ln26_3_fu_662_p1(30 downto 0);
                    zext_ln28_reg_1291(62 downto 0) <= zext_ln28_fu_674_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln25_3_reg_1217 <= add_ln25_3_fu_604_p2;
                select_ln25_1_reg_1231 <= select_ln25_1_fu_631_p3;
                select_ln25_2_reg_1238 <= select_ln25_2_fu_639_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln25_reg_1167 <= add_ln25_fu_511_p2;
                empty_reg_1173 <= empty_fu_529_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                add_ln26_1_reg_1438 <= add_ln26_1_fu_999_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln26_reg_1368 <= add_ln26_fu_817_p2;
                add_ln28_1_reg_1310 <= add_ln28_1_fu_716_p2;
                add_ln30_2_reg_1362 <= add_ln30_2_fu_812_p2;
                icmp_ln29_reg_1315 <= icmp_ln29_fu_728_p2;
                or_ln32_1_reg_1302 <= or_ln32_1_fu_704_p2;
                p_mid13_reg_1336 <= p_mid13_fu_768_p2;
                select_ln28_1_reg_1325 <= select_ln28_1_fu_742_p3;
                select_ln28_2_reg_1330 <= select_ln28_2_fu_760_p3;
                select_ln28_3_reg_1342 <= select_ln28_3_fu_779_p3;
                select_ln28_5_reg_1352 <= select_ln28_5_fu_791_p3;
                select_ln28_reg_1320 <= select_ln28_fu_734_p3;
                tmp_reg_1357 <= tmp_fu_807_p2;
                trunc_ln28_reg_1347 <= trunc_ln28_fu_787_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                add_ln29_reg_1387 <= add_ln29_fu_941_p2;
                empty_29_reg_1392 <= empty_29_fu_950_p2;
                or_ln32_2_reg_1383 <= or_ln32_2_fu_935_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln30_1_reg_1412 <= add_ln30_1_fu_964_p2;
                kernel_addr_reg_1418 <= p_cast_fu_969_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln30_reg_1407 <= add_ln30_fu_956_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    channels_cast19_reg_1178(31 downto 0) <= channels_cast19_fu_536_p1(31 downto 0);
                empty_25_reg_1204 <= empty_25_fu_577_p3;
                mul_ln25_reg_1188 <= grp_fu_417_p2;
                mul_ln6_reg_1209 <= grp_fu_413_p2;
                sext_ln25_reg_1183 <= sext_ln25_fu_548_p1;
                    zext_ln42_reg_1199(1 downto 0) <= zext_ln42_fu_563_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                channels_read_reg_1049 <= channels;
                cmp222_reg_1129 <= cmp222_fu_447_p2;
                empty_24_reg_1135 <= empty_24_fu_467_p3;
                height_read_reg_1059 <= height;
                icmp_ln25_reg_1124 <= icmp_ln25_fu_441_p2;
                image_r_read_reg_1083 <= image_r;
                out_r_read_reg_1077 <= out_r;
                width_read_reg_1067 <= width;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                empty_26_reg_1296 <= empty_26_fu_682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                kernel_load_reg_1428 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                mul_ln25_1_reg_1140 <= grp_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                mul_ln25_2_reg_1157 <= grp_fu_421_p2;
                    wide_trip_count_reg_1145(31 downto 0) <= wide_trip_count_fu_490_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                mul_ln25_3_reg_1255 <= grp_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                mul_ln28_reg_1397 <= grp_fu_858_p2;
                tmp1_reg_1402 <= grp_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln28_fu_710_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                sum_0_1_fu_136 <= sum_0_5_reg_295;
                sum_1_1_fu_140 <= sum_1_5_reg_285;
                sum_2_1_fu_144 <= sum_2_5_reg_275;
            end if;
        end if;
    end process;
    wide_trip_count_reg_1145(63 downto 32) <= "00000000000000000000000000000000";
    channels_cast19_reg_1178(62 downto 32) <= "0000000000000000000000000000000";
    zext_ln42_reg_1199(31 downto 2) <= "000000000000000000000000000000";
    zext_ln25_1_reg_1260(31) <= '0';
    zext_ln26_3_reg_1272(31) <= '0';
    zext_ln28_reg_1291(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state22, ap_CS_fsm_state34, ap_CS_fsm_state9, ap_CS_fsm_state48, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state16, or_ln32_2_reg_1383, ap_CS_fsm_state21, grp_applyConvolution_Pipeline_1_fu_363_ap_done, grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_done, grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_done, input_r_ARREADY, output_r_AWREADY, output_r_BVALID, icmp_ln25_3_fu_599_p2, ap_CS_fsm_state31, ap_CS_fsm_state43, icmp_ln28_fu_710_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln25_3_fu_599_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((grp_applyConvolution_Pipeline_1_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((icmp_ln28_fu_710_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((or_ln32_2_reg_1383 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                if (((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((output_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln25_1_fu_625_p2 <= std_logic_vector(unsigned(y_fu_148) + unsigned(ap_const_lv31_1));
    add_ln25_2_fu_658_p2 <= std_logic_vector(unsigned(mul_ln25_3_reg_1255) + unsigned(image_r_read_reg_1083));
    add_ln25_3_fu_604_p2 <= std_logic_vector(unsigned(indvar_flatten12_fu_152) + unsigned(ap_const_lv64_1));
    add_ln25_fu_511_p2 <= std_logic_vector(unsigned(channels_cast_fu_508_p1) + unsigned(ap_const_lv33_1FFFFFFFD));
    add_ln26_1_fu_999_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_996_p1) + unsigned(add_ln25_2_reg_1266));
    add_ln26_2_fu_822_p2 <= std_logic_vector(unsigned(select_ln25_1_reg_1231) + unsigned(ap_const_lv31_1));
    add_ln26_fu_817_p2 <= std_logic_vector(unsigned(mul_ln26_reg_1286) + unsigned(ap_const_lv63_3));
    add_ln28_1_fu_716_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_253) + unsigned(ap_const_lv4_1));
    add_ln28_fu_722_p2 <= std_logic_vector(unsigned(indvar_reg_264) + unsigned(ap_const_lv2_1));
    add_ln29_1_fu_991_p2 <= std_logic_vector(unsigned(select_ln28_reg_1320) + unsigned(ap_const_lv2_1));
    add_ln29_cast_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_fu_941_p2),4));
    add_ln29_fu_941_p2 <= std_logic_vector(signed(select_ln28_1_reg_1325) + signed(ap_const_lv3_1));
    add_ln30_1_fu_964_p2 <= std_logic_vector(unsigned(add_ln30_3_fu_960_p2) + unsigned(add_ln25_2_reg_1266));
    add_ln30_2_fu_812_p2 <= std_logic_vector(signed(sext_ln29_fu_799_p1) + signed(zext_ln26_3_reg_1272));
    add_ln30_3_fu_960_p2 <= std_logic_vector(unsigned(add_ln30_reg_1407) + unsigned(zext_ln28_reg_1291));
    add_ln30_fu_956_p2 <= std_logic_vector(unsigned(mul_ln28_reg_1397) + unsigned(tmp1_reg_1402));
    and_ln25_fu_517_p2 <= (cmp28_fu_503_p2 and cmp222_reg_1129);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_applyConvolution_Pipeline_1_fu_363_ap_done)
    begin
        if ((grp_applyConvolution_Pipeline_1_fu_363_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(input_r_ARREADY)
    begin
        if ((input_r_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;

    ap_ST_fsm_state31_blk_assign_proc : process(grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_done)
    begin
        if ((grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state31_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state31_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(input_r_ARREADY)
    begin
        if ((input_r_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;

    ap_ST_fsm_state43_blk_assign_proc : process(grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_done)
    begin
        if ((grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state43_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state43_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;

    ap_ST_fsm_state48_blk_assign_proc : process(output_r_BVALID)
    begin
        if ((output_r_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state48_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state48_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;

    ap_ST_fsm_state9_blk_assign_proc : process(output_r_AWREADY)
    begin
        if ((output_r_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state48, output_r_BVALID)
    begin
        if (((output_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_sum_0_9_phi_fu_355_p4_assign_proc : process(or_ln32_2_reg_1383, ap_CS_fsm_state32, grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_0_6_out, sum_0_9_reg_351)
    begin
        if (((or_ln32_2_reg_1383 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            ap_phi_mux_sum_0_9_phi_fu_355_p4 <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_0_6_out;
        else 
            ap_phi_mux_sum_0_9_phi_fu_355_p4 <= sum_0_9_reg_351;
        end if; 
    end process;


    ap_phi_mux_sum_1_9_phi_fu_343_p4_assign_proc : process(or_ln32_2_reg_1383, ap_CS_fsm_state32, grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_1_6_out, sum_1_9_reg_339)
    begin
        if (((or_ln32_2_reg_1383 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            ap_phi_mux_sum_1_9_phi_fu_343_p4 <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_1_6_out;
        else 
            ap_phi_mux_sum_1_9_phi_fu_343_p4 <= sum_1_9_reg_339;
        end if; 
    end process;


    ap_phi_mux_sum_2_9_phi_fu_331_p4_assign_proc : process(or_ln32_2_reg_1383, ap_CS_fsm_state32, grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_2_6_out, sum_2_9_reg_327)
    begin
        if (((or_ln32_2_reg_1383 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            ap_phi_mux_sum_2_9_phi_fu_331_p4 <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_sum_2_6_out;
        else 
            ap_phi_mux_sum_2_9_phi_fu_331_p4 <= sum_2_9_reg_327;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state48, output_r_BVALID)
    begin
        if (((output_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    channels_cast19_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_read_reg_1049),63));
    channels_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_read_reg_1049),33));
    cmp222_fu_447_p0 <= channels;
    cmp222_fu_447_p2 <= "1" when (signed(cmp222_fu_447_p0) > signed(ap_const_lv32_0)) else "0";
    cmp28_fu_503_p2 <= "1" when (signed(width_read_reg_1067) > signed(ap_const_lv32_0)) else "0";
    empty_24_fu_467_p3 <= 
        select_ln34_fu_459_p3 when (cmp222_fu_447_p2(0) = '1') else 
        ap_const_lv2_0;
    empty_25_fu_577_p3 <= 
        select_ln42_fu_569_p3 when (cmp222_reg_1129(0) = '1') else 
        ap_const_lv32_0;
    empty_26_fu_682_p2 <= std_logic_vector(signed(sext_ln28_fu_678_p1) + signed(zext_ln25_1_reg_1260));
    empty_28_fu_873_p2 <= std_logic_vector(unsigned(tmp_1_fu_866_p3) - unsigned(select_ln28_3_cast43_fu_863_p1));
    empty_29_fu_950_p2 <= std_logic_vector(unsigned(empty_28_fu_873_p2) + unsigned(add_ln29_cast_fu_946_p1));
    empty_fu_529_p3 <= 
        select_ln25_fu_522_p3 when (icmp_ln25_reg_1124(0) = '1') else 
        ap_const_lv32_0;
    grp_applyConvolution_Pipeline_1_fu_363_ap_start <= grp_applyConvolution_Pipeline_1_fu_363_ap_start_reg;
    grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_start <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_ap_start_reg;
    grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_start <= grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_ap_start_reg;
    grp_fu_409_p0 <= grp_fu_409_p00(31 - 1 downto 0);
    grp_fu_409_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_1_reg_1231),63));
    grp_fu_409_p1 <= channels_cast19_reg_1178(32 - 1 downto 0);

    grp_fu_413_ce_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, output_r_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_413_ce <= ap_const_logic_1;
        else 
            grp_fu_413_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_413_p0 <= grp_fu_413_p00(32 - 1 downto 0);
    grp_fu_413_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(height_read_reg_1059),64));
    grp_fu_413_p1 <= wide_trip_count37_fu_494_p1(32 - 1 downto 0);

    grp_fu_417_ce_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state7, ap_CS_fsm_state8, output_r_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)))) then 
            grp_fu_417_ce <= ap_const_logic_1;
        else 
            grp_fu_417_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_417_p0 <= grp_fu_417_p00(32 - 1 downto 0);
    grp_fu_417_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_read_reg_1049),64));
    grp_fu_417_p1 <= wide_trip_count37_fu_494_p1(32 - 1 downto 0);
    grp_fu_429_p1 <= wide_trip_count_reg_1145(32 - 1 downto 0);

    grp_fu_433_ce_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, grp_applyConvolution_Pipeline_1_fu_363_ap_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((grp_applyConvolution_Pipeline_1_fu_363_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            grp_fu_433_ce <= ap_const_logic_1;
        else 
            grp_fu_433_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_433_p0 <= grp_fu_433_p00(31 - 1 downto 0);
    grp_fu_433_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_2_reg_1238),64));
    grp_fu_858_p0 <= grp_fu_858_p00(2 - 1 downto 0);
    grp_fu_858_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_2_reg_1330),64));
    icmp_ln25_1_fu_453_p0 <= channels;
    icmp_ln25_1_fu_453_p2 <= "1" when (unsigned(icmp_ln25_1_fu_453_p0) < unsigned(ap_const_lv32_3)) else "0";
    icmp_ln25_2_fu_552_p2 <= "1" when (signed(add_ln25_reg_1167) > signed(ap_const_lv33_0)) else "0";
    icmp_ln25_3_fu_599_p2 <= "1" when (indvar_flatten12_fu_152 = mul_ln6_reg_1209) else "0";
    icmp_ln25_fu_441_p0 <= height;
    icmp_ln25_fu_441_p2 <= "1" when (signed(icmp_ln25_fu_441_p0) > signed(ap_const_lv32_0)) else "0";
    icmp_ln26_fu_594_p2 <= "1" when (signed(zext_ln26_1_fu_590_p1) < signed(width_read_reg_1067)) else "0";
    icmp_ln28_fu_710_p2 <= "1" when (indvar_flatten_reg_253 = ap_const_lv4_9) else "0";
    icmp_ln29_fu_728_p2 <= "1" when (kx_reg_316 = ap_const_lv3_2) else "0";
    icmp_ln32_fu_919_p2 <= "1" when (signed(add_ln30_2_reg_1362) < signed(width_read_reg_1067)) else "0";
    indvars_iv_next2317_fu_750_p2 <= std_logic_vector(signed(ky_reg_241) + signed(ap_const_lv3_1));
    indvars_iv_next23_mid1_fu_773_p2 <= std_logic_vector(signed(ky_reg_241) + signed(ap_const_lv3_2));

    input_r_ARADDR_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state34, add_ln30_1_reg_1412, ap_CS_fsm_state30, add_ln26_1_reg_1438, grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARADDR, grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARADDR, input_r_ARREADY, ap_CS_fsm_state31, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            input_r_ARADDR <= add_ln26_1_reg_1438;
        elsif (((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            input_r_ARADDR <= add_ln30_1_reg_1412;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            input_r_ARADDR <= grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            input_r_ARADDR <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARADDR;
        else 
            input_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ARLEN_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state34, zext_ln42_reg_1199, empty_25_reg_1204, ap_CS_fsm_state30, grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARLEN, grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARLEN, input_r_ARREADY, ap_CS_fsm_state31, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            input_r_ARLEN <= empty_25_reg_1204;
        elsif (((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            input_r_ARLEN <= zext_ln42_reg_1199;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            input_r_ARLEN <= grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            input_r_ARLEN <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARLEN;
        else 
            input_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_r_ARVALID_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state34, ap_CS_fsm_state30, grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARVALID, grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARVALID, input_r_ARREADY, ap_CS_fsm_state31, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if ((((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((input_r_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            input_r_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            input_r_ARVALID <= grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            input_r_ARVALID <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_ARVALID;
        else 
            input_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    input_r_RREADY_assign_proc : process(ap_CS_fsm_state30, grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_RREADY, grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_RREADY, ap_CS_fsm_state31, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            input_r_RREADY <= grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_input_r_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            input_r_RREADY <= grp_applyConvolution_Pipeline_VITIS_LOOP_34_5_fu_373_m_axi_input_r_RREADY;
        else 
            input_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    input_r_blk_n_AR_assign_proc : process(m_axi_input_r_ARREADY, ap_CS_fsm_state22, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            input_r_blk_n_AR <= m_axi_input_r_ARREADY;
        else 
            input_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    kernel_ce0_assign_proc : process(ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln32_1_fu_704_p2 <= (tmp_3_fu_687_p3 or rev_fu_698_p2);
    or_ln32_2_fu_935_p2 <= (select_ln28_4_fu_902_p3 or or_ln32_fu_929_p2);
    or_ln32_3_fu_896_p2 <= (tmp_4_fu_879_p3 or rev71_fu_890_p2);
    or_ln32_fu_929_p2 <= (xor_ln32_fu_923_p2 or tmp_5_fu_912_p3);

    output_r_AWADDR_assign_proc : process(ap_CS_fsm_state9, out_r_read_reg_1077, grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWADDR, output_r_AWREADY, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_AWADDR <= out_r_read_reg_1077;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            output_r_AWADDR <= grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWADDR;
        else 
            output_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_AWLEN_assign_proc : process(ap_CS_fsm_state9, empty_reg_1173, grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWLEN, output_r_AWREADY, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_AWLEN <= empty_reg_1173;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            output_r_AWLEN <= grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWLEN;
        else 
            output_r_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_AWVALID_assign_proc : process(ap_CS_fsm_state9, grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWVALID, output_r_AWREADY, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((output_r_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_AWVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            output_r_AWVALID <= grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_AWVALID;
        else 
            output_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_r_BREADY_assign_proc : process(ap_CS_fsm_state48, grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_BREADY, output_r_BVALID, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((output_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            output_r_BREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            output_r_BREADY <= grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_BREADY;
        else 
            output_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    output_r_WVALID_assign_proc : process(grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WVALID, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            output_r_WVALID <= grp_applyConvolution_Pipeline_VITIS_LOOP_42_6_fu_392_m_axi_output_r_WVALID;
        else 
            output_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    output_r_blk_n_AW_assign_proc : process(m_axi_output_r_AWREADY, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_blk_n_AW <= m_axi_output_r_AWREADY;
        else 
            output_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    output_r_blk_n_B_assign_proc : process(m_axi_output_r_BVALID, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            output_r_blk_n_B <= m_axi_output_r_BVALID;
        else 
            output_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;

    p_cast_fu_969_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_29_reg_1392),64));
    p_mid13_fu_768_p2 <= std_logic_vector(signed(sext_ln28_1_fu_756_p1) + signed(zext_ln25_1_reg_1260));
    rev71_fu_890_p2 <= (slt70_fu_886_p2 xor ap_const_lv1_1);
    rev_fu_698_p2 <= (slt_fu_694_p2 xor ap_const_lv1_1);
    select_ln25_1_fu_631_p3 <= 
        x_fu_132 when (icmp_ln26_fu_594_p2(0) = '1') else 
        ap_const_lv31_0;
    select_ln25_2_fu_639_p3 <= 
        y_fu_148 when (icmp_ln26_fu_594_p2(0) = '1') else 
        add_ln25_1_fu_625_p2;
    select_ln25_fu_522_p3 <= 
        mul_ln25_2_reg_1157 when (and_ln25_fu_517_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln28_1_fu_742_p3 <= 
        ap_const_lv3_7 when (icmp_ln29_fu_728_p2(0) = '1') else 
        kx_reg_316;
    select_ln28_2_fu_760_p3 <= 
        add_ln28_fu_722_p2 when (icmp_ln29_fu_728_p2(0) = '1') else 
        indvar_reg_264;
    select_ln28_3_cast43_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_3_reg_1342),4));
    select_ln28_3_fu_779_p3 <= 
        indvars_iv_next23_mid1_fu_773_p2 when (icmp_ln29_fu_728_p2(0) = '1') else 
        indvars_iv_next2317_fu_750_p2;
    select_ln28_4_fu_902_p3 <= 
        or_ln32_3_fu_896_p2 when (icmp_ln29_reg_1315(0) = '1') else 
        or_ln32_1_reg_1302;
    select_ln28_5_fu_791_p3 <= 
        indvars_iv_next2317_fu_750_p2 when (icmp_ln29_fu_728_p2(0) = '1') else 
        ky_reg_241;
    select_ln28_fu_734_p3 <= 
        ap_const_lv2_0 when (icmp_ln29_fu_728_p2(0) = '1') else 
        indvar4_reg_305;
    select_ln34_fu_459_p3 <= 
        trunc_ln6_fu_437_p1 when (icmp_ln25_1_fu_453_p2(0) = '1') else 
        ap_const_lv2_3;
    select_ln42_fu_569_p3 <= 
        trunc_ln42_fu_566_p1 when (icmp_ln25_2_fu_552_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln25_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln25_fu_542_p2),34));

        sext_ln28_1_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(indvars_iv_next2317_fu_750_p2),32));

        sext_ln28_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ky_reg_241),32));

        sext_ln29_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln28_1_fu_742_p3),32));

    slt70_fu_886_p2 <= "1" when (signed(p_mid13_reg_1336) < signed(height_read_reg_1059)) else "0";
    slt_fu_694_p2 <= "1" when (signed(empty_26_reg_1296) < signed(height_read_reg_1059)) else "0";
    tmp_1_fu_866_p3 <= (trunc_ln28_reg_1347 & ap_const_lv2_0);
    tmp_3_fu_687_p3 <= empty_26_reg_1296(31 downto 31);
    tmp_4_fu_879_p3 <= p_mid13_reg_1336(31 downto 31);
    tmp_5_fu_912_p3 <= add_ln30_2_reg_1362(31 downto 31);
    tmp_fu_807_p2 <= std_logic_vector(unsigned(zext_ln29_fu_803_p1) + unsigned(sext_ln25_reg_1183));
    trunc_ln28_fu_787_p1 <= select_ln28_3_fu_779_p3(2 - 1 downto 0);
    trunc_ln42_fu_566_p1 <= add_ln25_reg_1167(32 - 1 downto 0);
    trunc_ln6_fu_437_p0 <= channels;
    trunc_ln6_fu_437_p1 <= trunc_ln6_fu_437_p0(2 - 1 downto 0);
    wide_trip_count37_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_read_reg_1067),64));
    wide_trip_count_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(channels_read_reg_1049),64));
    xor_ln25_fu_542_p2 <= (zext_ln25_fu_539_p1 xor ap_const_lv33_1FFFFFFFF);
    xor_ln32_fu_923_p2 <= (icmp_ln32_fu_919_p2 xor ap_const_lv1_1);
    zext_ln25_1_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_2_reg_1238),32));
    zext_ln25_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_read_reg_1067),33));
    zext_ln26_1_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_fu_132),32));
    zext_ln26_2_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_reg_1368),64));
    zext_ln26_3_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_1_reg_1231),32));
    zext_ln28_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_409_p2),64));
    zext_ln29_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_fu_734_p3),34));
    zext_ln42_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_24_reg_1135),32));
end behav;
